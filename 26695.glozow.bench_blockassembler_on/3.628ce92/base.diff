[33mdiff --git a/src/bench/block_assemble.cpp b/src/bench/block_assemble.cpp[m
[33mindex 69258377d5..982b805b04 100644[m
[33m--- a/src/bench/block_assemble.cpp[m
[33m+++ b/src/bench/block_assemble.cpp[m
[36m@@ -5,6 +5,7 @@[m
 #include <bench/bench.h>[m
 #include <consensus/validation.h>[m
 #include <crypto/sha256.h>[m
[32m+[m[32m#include <node/miner.h>[m
 #include <test/util/mining.h>[m
 #include <test/util/script.h>[m
 #include <test/util/setup_common.h>[m
[36m@@ -45,5 +46,18 @@[m [mstatic void AssembleBlock(benchmark::Bench& bench)[m
         PrepareBlock(test_setup->m_node, P2WSH_OP_TRUE);[m
     });[m
 }[m
[32m+[m[32mstatic void BlockAssemblerAddPackageTxns(benchmark::Bench& bench)[m
[32m+[m[32m{[m
[32m+[m[32m    FastRandomContext det_rand{true};[m
[32m+[m[32m    auto testing_setup{MakeNoLogFileContext<TestChain100Setup>()};[m
[32m+[m[32m    testing_setup->PopulateMempool(det_rand, /*num_transactions=*/1000, /*submit=*/true);[m
[32m+[m[32m    node::BlockAssembler::Options assembler_options;[m
[32m+[m[32m    assembler_options.test_block_validity = false;[m
[32m+[m
[32m+[m[32m    bench.run([&] {[m
[32m+[m[32m        PrepareBlock(testing_setup->m_node, P2WSH_OP_TRUE, assembler_options);[m
[32m+[m[32m    });[m
[32m+[m[32m}[m
 [m
 BENCHMARK(AssembleBlock, benchmark::PriorityLevel::HIGH);[m
[32m+[m[32mBENCHMARK(BlockAssemblerAddPackageTxns, benchmark::PriorityLevel::HIGH);[m
[33mdiff --git a/src/node/miner.cpp b/src/node/miner.cpp[m
[33mindex e11ec5b0f1..968e1e674c 100644[m
[33m--- a/src/node/miner.cpp[m
[33m+++ b/src/node/miner.cpp[m
[36m@@ -60,10 +60,12 @@[m [mBlockAssembler::Options::Options()[m
 {[m
     blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);[m
     nBlockMaxWeight = DEFAULT_BLOCK_MAX_WEIGHT;[m
[32m+[m[32m    test_block_validity = true;[m
 }[m
 [m
 BlockAssembler::BlockAssembler(Chainstate& chainstate, const CTxMemPool* mempool, const Options& options)[m
[31m-    : chainparams{chainstate.m_chainman.GetParams()},[m
[32m+[m[32m    : test_block_validity{options.test_block_validity},[m
[32m+[m[32m      chainparams{chainstate.m_chainman.GetParams()},[m
       m_mempool(mempool),[m
       m_chainstate(chainstate)[m
 {[m
[36m@@ -72,11 +74,10 @@[m [mBlockAssembler::BlockAssembler(Chainstate& chainstate, const CTxMemPool* mempool[m
     nBlockMaxWeight = std::max<size_t>(4000, std::min<size_t>(MAX_BLOCK_WEIGHT - 4000, options.nBlockMaxWeight));[m
 }[m
 [m
[2m-static BlockAssembler::Options DefaultOptions()[m
[32m+[m[32mvoid ApplyArgsManOptions(const ArgsManager& gArgs, BlockAssembler::Options& options)[m
 {[m
     // Block resource limits[m
     // If -blockmaxweight is not given, limit to DEFAULT_BLOCK_MAX_WEIGHT[m
[2m-    BlockAssembler::Options options;[m
     options.nBlockMaxWeight = gArgs.GetIntArg("-blockmaxweight", DEFAULT_BLOCK_MAX_WEIGHT);[m
     if (gArgs.IsArgSet("-blockmintxfee")) {[m
         std::optional<CAmount> parsed = ParseMoney(gArgs.GetArg("-blockmintxfee", ""));[m
[36m@@ -84,6 +85,11 @@[m [mstatic BlockAssembler::Options DefaultOptions()[m
     } else {[m
         options.blockMinFeeRate = CFeeRate{DEFAULT_BLOCK_MIN_TX_FEE};[m
     }[m
[32m+[m[32m}[m
[2m+[m[2mstatic BlockAssembler::Options DefaultOptions()[m
[32m+[m[32m{[m
[2m+[m[2m    BlockAssembler::Options options;[m
[32m+[m[32m    ApplyArgsManOptions(gArgs, options);[m
     return options;[m
 }[m
 [m
[36m@@ -170,7 +176,8 @@[m [mstd::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc[m
     pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);[m
 [m
     BlockValidationState state;[m
[31m-    if (!TestBlockValidity(state, chainparams, m_chainstate, *pblock, pindexPrev, GetAdjustedTime, false, false)) {[m
[32m+[m[32m    if (test_block_validity && !TestBlockValidity(state, chainparams, m_chainstate, *pblock, pindexPrev,[m
[32m+[m[32m                                                  GetAdjustedTime, /*fCheckPOW=*/false, /*fCheckMerkleRoot=*/false)) {[m
         throw std::runtime_error(strprintf("%s: TestBlockValidity failed: %s", __func__, state.ToString()));[m
     }[m
     const auto time_2{SteadyClock::now()};[m
[33mdiff --git a/src/node/miner.h b/src/node/miner.h[m
[33mindex 7269ce1186..c9c37c594c 100644[m
[33m--- a/src/node/miner.h[m
[33m+++ b/src/node/miner.h[m
[36m@@ -16,6 +16,7 @@[m
 #include <boost/multi_index/ordered_index.hpp>[m
 #include <boost/multi_index_container.hpp>[m
 [m
[32m+[m[32mclass ArgsManager;[m
 class ChainstateManager;[m
 class CBlockIndex;[m
 class CChainParams;[m
[36m@@ -135,6 +136,9 @@[m [mprivate:[m
     unsigned int nBlockMaxWeight;[m
     CFeeRate blockMinFeeRate;[m
 [m
[32m+[m[32m    // Whether to call TestBlockValidity() at the end of CreateNewBlock().[m
[32m+[m[32m    const bool test_block_validity;[m
[32m+[m
     // Information on the current status of the block[m
     uint64_t nBlockWeight;[m
     uint64_t nBlockTx;[m
[36m@@ -155,6 +159,7 @@[m [mpublic:[m
         Options();[m
         size_t nBlockMaxWeight;[m
         CFeeRate blockMinFeeRate;[m
[32m+[m[32m        bool test_block_validity;[m
     };[m
 [m
     explicit BlockAssembler(Chainstate& chainstate, const CTxMemPool* mempool);[m
[36m@@ -197,6 +202,9 @@[m [mint64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParam[m
 [m
 /** Update an old GenerateCoinbaseCommitment from CreateNewBlock after the block txs have changed */[m
 void RegenerateCommitments(CBlock& block, ChainstateManager& chainman);[m
[32m+[m
[32m+[m[32m/** Apply -blockmintxfee and -blockmaxweight options from ArgsManager to BlockAssembler options. */[m
[32m+[m[32mvoid ApplyArgsManOptions(const ArgsManager& gArgs, BlockAssembler::Options& options);[m
 } // namespace node[m
 [m
 #endif // BITCOIN_NODE_MINER_H[m
[33mdiff --git a/src/test/util/mining.cpp b/src/test/util/mining.cpp[m
[33mindex faa0b2878c..1942a211a1 100644[m
[33m--- a/src/test/util/mining.cpp[m
[33m+++ b/src/test/util/mining.cpp[m
[36m@@ -8,7 +8,6 @@[m
 #include <consensus/merkle.h>[m
 #include <key_io.h>[m
 #include <node/context.h>[m
[31m-#include <node/miner.h>[m
 #include <pow.h>[m
 #include <script/standard.h>[m
 #include <test/util/script.h>[m
[36m@@ -74,10 +73,11 @@[m [mCTxIn MineBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)[m
     return CTxIn{block->vtx[0]->GetHash(), 0};[m
 }[m
 [m
[2m-std::shared_ptr<CBlock> PrepareBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)[m
[32m+[m[32mstd::shared_ptr<CBlock> PrepareBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey,[m
[32m+[m[32m                                     const BlockAssembler::Options& assembler_options)[m
 {[m
     auto block = std::make_shared<CBlock>([m
[31m-        BlockAssembler{Assert(node.chainman)->ActiveChainstate(), Assert(node.mempool.get())}[m
[32m+[m[32m        BlockAssembler{Assert(node.chainman)->ActiveChainstate(), Assert(node.mempool.get()), assembler_options}[m
             .CreateNewBlock(coinbase_scriptPubKey)[m
             ->block);[m
 [m
[36m@@ -87,3 +87,9 @@[m [mstd::shared_ptr<CBlock> PrepareBlock(const NodeContext& node, const CScript& coi[m
 [m
     return block;[m
 }[m
[2m+[m[2mstd::shared_ptr<CBlock> PrepareBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)[m
[32m+[m[32m{[m
[32m+[m[32m    BlockAssembler::Options assembler_options;[m
[32m+[m[32m    ApplyArgsManOptions(*node.args, assembler_options);[m
[32m+[m[32m    return PrepareBlock(node, coinbase_scriptPubKey, assembler_options);[m
[32m+[m[32m}[m
[33mdiff --git a/src/test/util/mining.h b/src/test/util/mining.h[m
[33mindex 09e712cd35..70b1f7b3fb 100644[m
[33m--- a/src/test/util/mining.h[m
[33m+++ b/src/test/util/mining.h[m
[36m@@ -5,6 +5,8 @@[m
 #ifndef BITCOIN_TEST_UTIL_MINING_H[m
 #define BITCOIN_TEST_UTIL_MINING_H[m
 [m
[32m+[m[32m#include <node/miner.h>[m
[32m+[m
 #include <memory>[m
 #include <string>[m
 #include <vector>[m
[36m@@ -25,6 +27,8 @@[m [mCTxIn MineBlock(const node::NodeContext&, const CScript& coinbase_scriptPubKey);[m
 [m
 /** Prepare a block to be mined */[m
 std::shared_ptr<CBlock> PrepareBlock(const node::NodeContext&, const CScript& coinbase_scriptPubKey);[m
[32m+[m[32mstd::shared_ptr<CBlock> PrepareBlock(const node::NodeContext& node, const CScript& coinbase_scriptPubKey,[m
[32m+[m[32m                                     const node::BlockAssembler::Options& assembler_options);[m
 [m
 /** RPC-like helper function, returns the generated coin */[m
 CTxIn generatetoaddress(const node::NodeContext&, const std::string& address);[m
[33mdiff --git a/src/test/util/setup_common.cpp b/src/test/util/setup_common.cpp[m
[33mindex a7ca97222a..f79f5bcc02 100644[m
[33m--- a/src/test/util/setup_common.cpp[m
[33m+++ b/src/test/util/setup_common.cpp[m
[36m@@ -397,15 +397,15 @@[m [mstd::vector<CTransactionRef> TestChain100Setup::PopulateMempool(FastRandomContex[m
             unspent_prevouts.pop_front();[m
         }[m
         const size_t num_outputs = det_rand.randrange(24) + 1;[m
[31m-        // Approximately 1000sat "fee," equal output amounts.[m
[31m-        const CAmount amount_per_output = (total_in - 1000) / num_outputs;[m
[32m+[m[32m        const CAmount fee = 100 * det_rand.randrange(30);[m
[32m+[m[32m        const CAmount amount_per_output = (total_in - fee) / num_outputs;[m
         for (size_t n{0}; n < num_outputs; ++n) {[m
             CScript spk = CScript() << CScriptNum(num_transactions + n);[m
             mtx.vout.push_back(CTxOut(amount_per_output, spk));[m
         }[m
         CTransactionRef ptx = MakeTransactionRef(mtx);[m
         mempool_transactions.push_back(ptx);[m
[31m-        if (amount_per_output > 2000) {[m
[32m+[m[32m        if (amount_per_output > 3000) {[m
             // If the value is high enough to fund another transaction + fees, keep track of it so[m
             // it can be used to build a more complex transaction graph. Insert randomly into[m
             // unspent_prevouts for extra randomness in the resulting structures.[m
[36m@@ -415,7 +415,7 @@[m [mstd::vector<CTransactionRef> TestChain100Setup::PopulateMempool(FastRandomContex[m
             }[m
         }[m
         if (submit) {[m
[31m-            LOCK2(m_node.mempool->cs, cs_main);[m
[32m+[m[32m            LOCK2(cs_main, m_node.mempool->cs);[m
             LockPoints lp;[m
             m_node.mempool->addUnchecked(CTxMemPoolEntry(ptx, 1000, 0, 1, false, 4, lp));[m
         }[m