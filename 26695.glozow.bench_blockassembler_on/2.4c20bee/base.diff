[33mdiff --git a/src/bench/block_assemble.cpp b/src/bench/block_assemble.cpp[m
[33mindex 69258377d5..aa79a27a02 100644[m
[33m--- a/src/bench/block_assemble.cpp[m
[33m+++ b/src/bench/block_assemble.cpp[m
[36m@@ -42,8 +42,21 @@[m [mstatic void AssembleBlock(benchmark::Bench& bench)[m
     }[m
 [m
     bench.run([&] {[m
[31m-        PrepareBlock(test_setup->m_node, P2WSH_OP_TRUE);[m
[32m+[m[32m        PrepareBlock(test_setup->m_node, P2WSH_OP_TRUE, true);[m
[32m+[m[32m    });[m
[32m+[m[32m}[m
[32m+[m[32mstatic void BlockAssemblerAddPackageTxns(benchmark::Bench& bench)[m
[32m+[m[32m{[m
[32m+[m[32m    FastRandomContext det_rand{true};[m
[32m+[m[32m    auto testing_setup = MakeNoLogFileContext<TestChain100Setup>();[m
[32m+[m[32m    CTxMemPool& pool = *testing_setup.get()->m_node.mempool;[m
[32m+[m[32m    LOCK2(cs_main, pool.cs);[m
[32m+[m[32m    const auto transactions = testing_setup->PopulateMempool(det_rand, 1000, true);[m
[32m+[m
[32m+[m[32m    bench.run([&] {[m
[32m+[m[32m        PrepareBlock(testing_setup->m_node, P2WSH_OP_TRUE, false);[m
     });[m
 }[m
 [m
 BENCHMARK(AssembleBlock, benchmark::PriorityLevel::HIGH);[m
[32m+[m[32mBENCHMARK(BlockAssemblerAddPackageTxns, benchmark::PriorityLevel::HIGH);[m
[33mdiff --git a/src/node/miner.cpp b/src/node/miner.cpp[m
[33mindex e11ec5b0f1..898daea389 100644[m
[33m--- a/src/node/miner.cpp[m
[33m+++ b/src/node/miner.cpp[m
[36m@@ -60,10 +60,12 @@[m [mBlockAssembler::Options::Options()[m
 {[m
     blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);[m
     nBlockMaxWeight = DEFAULT_BLOCK_MAX_WEIGHT;[m
[32m+[m[32m    test_block_validity = true;[m
 }[m
 [m
 BlockAssembler::BlockAssembler(Chainstate& chainstate, const CTxMemPool* mempool, const Options& options)[m
[31m-    : chainparams{chainstate.m_chainman.GetParams()},[m
[32m+[m[32m    : test_block_validity{options.test_block_validity},[m
[32m+[m[32m      chainparams{chainstate.m_chainman.GetParams()},[m
       m_mempool(mempool),[m
       m_chainstate(chainstate)[m
 {[m
[36m@@ -84,6 +86,7 @@[m [mstatic BlockAssembler::Options DefaultOptions()[m
     } else {[m
         options.blockMinFeeRate = CFeeRate{DEFAULT_BLOCK_MIN_TX_FEE};[m
     }[m
[32m+[m[32m    options.test_block_validity = true;[m
     return options;[m
 }[m
 [m
[36m@@ -170,7 +173,7 @@[m [mstd::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc[m
     pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);[m
 [m
     BlockValidationState state;[m
[31m-    if (!TestBlockValidity(state, chainparams, m_chainstate, *pblock, pindexPrev, GetAdjustedTime, false, false)) {[m
[32m+[m[32m    if (test_block_validity && !TestBlockValidity(state, chainparams, m_chainstate, *pblock, pindexPrev, GetAdjustedTime, false, false)) {[m
         throw std::runtime_error(strprintf("%s: TestBlockValidity failed: %s", __func__, state.ToString()));[m
     }[m
     const auto time_2{SteadyClock::now()};[m
[33mdiff --git a/src/node/miner.h b/src/node/miner.h[m
[33mindex 7269ce1186..b3ea147e40 100644[m
[33m--- a/src/node/miner.h[m
[33m+++ b/src/node/miner.h[m
[36m@@ -135,6 +135,9 @@[m [mprivate:[m
     unsigned int nBlockMaxWeight;[m
     CFeeRate blockMinFeeRate;[m
 [m
[32m+[m[32m    // Whether to call TestBlockValidity() at the end of CreateNewBlock().[m
[32m+[m[32m    const bool test_block_validity;[m
[32m+[m
     // Information on the current status of the block[m
     uint64_t nBlockWeight;[m
     uint64_t nBlockTx;[m
[36m@@ -155,6 +158,7 @@[m [mpublic:[m
         Options();[m
         size_t nBlockMaxWeight;[m
         CFeeRate blockMinFeeRate;[m
[32m+[m[32m        bool test_block_validity;[m
     };[m
 [m
     explicit BlockAssembler(Chainstate& chainstate, const CTxMemPool* mempool);[m
[33mdiff --git a/src/test/util/mining.cpp b/src/test/util/mining.cpp[m
[33mindex faa0b2878c..9f2901328b 100644[m
[33m--- a/src/test/util/mining.cpp[m
[33m+++ b/src/test/util/mining.cpp[m
[36m@@ -61,7 +61,7 @@[m [mstd::vector<std::shared_ptr<CBlock>> CreateBlockChain(size_t total_height, const[m
 [m
 CTxIn MineBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)[m
 {[m
[31m-    auto block = PrepareBlock(node, coinbase_scriptPubKey);[m
[32m+[m[32m    auto block = PrepareBlock(node, coinbase_scriptPubKey, true);[m
 [m
     while (!CheckProofOfWork(block->GetHash(), block->nBits, Params().GetConsensus())) {[m
         ++block->nNonce;[m
[36m@@ -74,10 +74,12 @@[m [mCTxIn MineBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)[m
     return CTxIn{block->vtx[0]->GetHash(), 0};[m
 }[m
 [m
[31m-std::shared_ptr<CBlock> PrepareBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)[m
[32m+[m[32mstd::shared_ptr<CBlock> PrepareBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey, bool check)[m
 {[m
[32m+[m[32m    BlockAssembler::Options options;[m
[32m+[m[32m    options.test_block_validity = check;[m
     auto block = std::make_shared<CBlock>([m
[31m-        BlockAssembler{Assert(node.chainman)->ActiveChainstate(), Assert(node.mempool.get())}[m
[32m+[m[32m        BlockAssembler{Assert(node.chainman)->ActiveChainstate(), Assert(node.mempool.get()), options}[m
             .CreateNewBlock(coinbase_scriptPubKey)[m
             ->block);[m
 [m
[33mdiff --git a/src/test/util/mining.h b/src/test/util/mining.h[m
[33mindex 09e712cd35..0d7502e3f6 100644[m
[33m--- a/src/test/util/mining.h[m
[33m+++ b/src/test/util/mining.h[m
[36m@@ -24,7 +24,7 @@[m [mstd::vector<std::shared_ptr<CBlock>> CreateBlockChain(size_t total_height, const[m
 CTxIn MineBlock(const node::NodeContext&, const CScript& coinbase_scriptPubKey);[m
 [m
 /** Prepare a block to be mined */[m
[31m-std::shared_ptr<CBlock> PrepareBlock(const node::NodeContext&, const CScript& coinbase_scriptPubKey);[m
[32m+[m[32mstd::shared_ptr<CBlock> PrepareBlock(const node::NodeContext&, const CScript& coinbase_scriptPubKey, bool check);[m
 [m
 /** RPC-like helper function, returns the generated coin */[m
 CTxIn generatetoaddress(const node::NodeContext&, const std::string& address);[m
[33mdiff --git a/src/test/util/setup_common.cpp b/src/test/util/setup_common.cpp[m
[33mindex a7ca97222a..dcdc00ecd0 100644[m
[33m--- a/src/test/util/setup_common.cpp[m
[33m+++ b/src/test/util/setup_common.cpp[m
[36m@@ -397,15 +397,15 @@[m [mstd::vector<CTransactionRef> TestChain100Setup::PopulateMempool(FastRandomContex[m
             unspent_prevouts.pop_front();[m
         }[m
         const size_t num_outputs = det_rand.randrange(24) + 1;[m
[31m-        // Approximately 1000sat "fee," equal output amounts.[m
[31m-        const CAmount amount_per_output = (total_in - 1000) / num_outputs;[m
[32m+[m[32m        const CAmount fee = 100 * det_rand.randrange(30);[m
[32m+[m[32m        const CAmount amount_per_output = (total_in - fee) / num_outputs;[m
         for (size_t n{0}; n < num_outputs; ++n) {[m
             CScript spk = CScript() << CScriptNum(num_transactions + n);[m
             mtx.vout.push_back(CTxOut(amount_per_output, spk));[m
         }[m
         CTransactionRef ptx = MakeTransactionRef(mtx);[m
         mempool_transactions.push_back(ptx);[m
[31m-        if (amount_per_output > 2000) {[m
[32m+[m[32m        if (amount_per_output > 3000) {[m
             // If the value is high enough to fund another transaction + fees, keep track of it so[m
             // it can be used to build a more complex transaction graph. Insert randomly into[m
             // unspent_prevouts for extra randomness in the resulting structures.[m