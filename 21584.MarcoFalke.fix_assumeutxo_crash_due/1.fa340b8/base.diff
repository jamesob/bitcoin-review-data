[33mdiff --git a/src/Makefile.am b/src/Makefile.am[m
[33mindex 972a3e279..2b389e4b0 100644[m
[33m--- a/src/Makefile.am[m
[33m+++ b/src/Makefile.am[m
[36m@@ -246,6 +246,7 @@[m [mBITCOIN_CORE_H = \[m
   util/fees.h \[m
   util/getuniquepath.h \[m
   util/golombrice.h \[m
[32m+[m[32m  util/hash_type.h \[m
   util/hasher.h \[m
   util/macros.h \[m
   util/message.h \[m
[33mdiff --git a/src/chainparams.cpp b/src/chainparams.cpp[m
[33mindex 45d93ca01..fc5a9d84c 100644[m
[33m--- a/src/chainparams.cpp[m
[33m+++ b/src/chainparams.cpp[m
[36m@@ -451,11 +451,11 @@[m [mpublic:[m
         m_assumeutxo_data = MapAssumeutxo{[m
             {[m
                 110,[m
[31m-                {uint256S("0x1ebbf5850204c0bdb15bf030f47c7fe91d45c44c712697e4509ba67adb01c618"), 110},[m
[32m+[m[32m                {AssumeutxoHash{uint256S("0x1ebbf5850204c0bdb15bf030f47c7fe91d45c44c712697e4509ba67adb01c618")}, 110},[m
             },[m
             {[m
                 210,[m
[31m-                {uint256S("0x9c5ed99ef98544b34f8920b6d1802f72ac28ae6e2bd2bd4c316ff10c230df3f2"), 210},[m
[32m+[m[32m                {AssumeutxoHash{uint256S("0x9c5ed99ef98544b34f8920b6d1802f72ac28ae6e2bd2bd4c316ff10c230df3f2")}, 210},[m
             },[m
         };[m
 [m
[36m@@ -559,9 +559,3 @@[m [mvoid SelectParams(const std::string& network)[m
     SelectBaseParams(network);[m
     globalChainParams = CreateChainParams(gArgs, network);[m
 }[m
[31m-[m
[31m-std::ostream& operator<<(std::ostream& o, const AssumeutxoData& aud)[m
[31m-{[m
[31m-    o << strprintf("AssumeutxoData(%s, %s)", aud.hash_serialized.ToString(), aud.nChainTx);[m
[31m-    return o;[m
[31m-}[m
[33mdiff --git a/src/chainparams.h b/src/chainparams.h[m
[33mindex 6f2319998..5c2351eea 100644[m
[33m--- a/src/chainparams.h[m
[33m+++ b/src/chainparams.h[m
[36m@@ -10,6 +10,7 @@[m
 #include <consensus/params.h>[m
 #include <primitives/block.h>[m
 #include <protocol.h>[m
[32m+[m[32m#include <util/hash_type.h>[m
 [m
 #include <memory>[m
 #include <vector>[m
[36m@@ -25,6 +26,10 @@[m [mstruct CCheckpointData {[m
     }[m
 };[m
 [m
[32m+[m[32mstruct AssumeutxoHash : public BaseHash<uint256> {[m
[32m+[m[32m    explicit AssumeutxoHash(const uint256& hash) : BaseHash(hash) {}[m
[32m+[m[32m};[m
[32m+[m
 /**[m
  * Holds configuration for use during UTXO snapshot load and validation. The contents[m
  * here are security critical, since they dictate which UTXO snapshots are recognized[m
[36m@@ -32,7 +37,7 @@[m [mstruct CCheckpointData {[m
  */[m
 struct AssumeutxoData {[m
     //! The expected hash of the deserialized UTXO set.[m
[31m-    const uint256 hash_serialized;[m
[32m+[m[32m    const AssumeutxoHash hash_serialized;[m
 [m
     //! Used to populate the nChainTx value, which is used during BlockManager::LoadBlockIndex().[m
     //![m
[36m@@ -41,8 +46,6 @@[m [mstruct AssumeutxoData {[m
     const unsigned int nChainTx;[m
 };[m
 [m
[31m-std::ostream& operator<<(std::ostream& o, const AssumeutxoData& aud);[m
[31m-[m
 using MapAssumeutxo = std::map<int, const AssumeutxoData>;[m
 [m
 /**[m
[33mdiff --git a/src/coins.h b/src/coins.h[m
[33mindex 5a6f73652..816b4864a 100644[m
[33m--- a/src/coins.h[m
[33m+++ b/src/coins.h[m
[36m@@ -20,8 +20,6 @@[m
 #include <functional>[m
 #include <unordered_map>[m
 [m
[31m-class ChainstateManager;[m
[31m-[m
 /**[m
  * A UTXO entry.[m
  *[m
[33mdiff --git a/src/script/standard.h b/src/script/standard.h[m
[33mindex f2bf4a8af..12ab9979a 100644[m
[33m--- a/src/script/standard.h[m
[33m+++ b/src/script/standard.h[m
[36m@@ -8,6 +8,7 @@[m
 [m
 #include <script/interpreter.h>[m
 #include <uint256.h>[m
[32m+[m[32m#include <util/hash_type.h>[m
 [m
 #include <string>[m
 #include <variant>[m
[36m@@ -18,70 +19,6 @@[m [mclass CKeyID;[m
 class CScript;[m
 struct ScriptHash;[m
 [m
[31m-template<typename HashType>[m
[2m-class BaseHash[m
[2m-{[m
[2m-protected:[m
[2m-    HashType m_hash;[m
[2m-[m
[2m-public:[m
[2m-    BaseHash() : m_hash() {}[m
[2m-    explicit BaseHash(const HashType& in) : m_hash(in) {}[m
[2m-[m
[2m-    unsigned char* begin()[m
[2m-    {[m
[2m-        return m_hash.begin();[m
[2m-    }[m
[2m-[m
[2m-    const unsigned char* begin() const[m
[2m-    {[m
[2m-        return m_hash.begin();[m
[2m-    }[m
[2m-[m
[2m-    unsigned char* end()[m
[2m-    {[m
[2m-        return m_hash.end();[m
[2m-    }[m
[2m-[m
[2m-    const unsigned char* end() const[m
[2m-    {[m
[2m-        return m_hash.end();[m
[2m-    }[m
[2m-[m
[2m-    operator std::vector<unsigned char>() const[m
[2m-    {[m
[2m-        return std::vector<unsigned char>{m_hash.begin(), m_hash.end()};[m
[2m-    }[m
[2m-[m
[2m-    std::string ToString() const[m
[2m-    {[m
[2m-        return m_hash.ToString();[m
[2m-    }[m
[2m-[m
[2m-    bool operator==(const BaseHash<HashType>& other) const noexcept[m
[2m-    {[m
[2m-        return m_hash == other.m_hash;[m
[2m-    }[m
[2m-[m
[2m-    bool operator!=(const BaseHash<HashType>& other) const noexcept[m
[2m-    {[m
[2m-        return !(m_hash == other.m_hash);[m
[2m-    }[m
[2m-[m
[2m-    bool operator<(const BaseHash<HashType>& other) const noexcept[m
[2m-    {[m
[2m-        return m_hash < other.m_hash;[m
[2m-    }[m
[2m-[m
[2m-    size_t size() const[m
[2m-    {[m
[2m-        return m_hash.size();[m
[2m-    }[m
[2m-[m
[2m-    unsigned char* data() { return m_hash.data(); }[m
[2m-    const unsigned char* data() const { return m_hash.data(); }[m
[2m-};[m
[2m-[m
 /** A reference to a CScript: the Hash160 of its serialization (see script.h) */[m
 class CScriptID : public BaseHash<uint160>[m
 {[m
[33mdiff --git a/src/test/validation_chainstatemanager_tests.cpp b/src/test/validation_chainstatemanager_tests.cpp[m
[33mindex 82e70b5cd..0b912acb0 100644[m
[33m--- a/src/test/validation_chainstatemanager_tests.cpp[m
[33m+++ b/src/test/validation_chainstatemanager_tests.cpp[m
[36m@@ -226,10 +226,8 @@[m [mBOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100Setup)[m
 [m
     // Snapshot should refuse to load at this height.[m
     BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot(m_node, m_path_root));[m
[31m-    BOOST_CHECK(chainman.ActiveChainstate().m_from_snapshot_blockhash.IsNull());[m
[31m-    BOOST_CHECK_EQUAL([m
[31m-        chainman.ActiveChainstate().m_from_snapshot_blockhash,[m
[31m-        chainman.SnapshotBlockhash().value_or(uint256()));[m
[32m+[m[32m    BOOST_CHECK(!chainman.ActiveChainstate().m_from_snapshot_blockhash);[m
[32m+[m[32m    BOOST_CHECK(!chainman.SnapshotBlockhash());[m
 [m
     // Mine 10 more blocks, putting at us height 110 where a valid assumeutxo value can[m
     // be found.[m
[36m@@ -260,6 +258,11 @@[m [mBOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100Setup)[m
             // Coins count is smaller than coins in file[m
             metadata.m_coins_count -= 1;[m
     }));[m
[32m+[m[32m    BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot([m
[32m+[m[32m        m_node, m_path_root, [](CAutoFile& auto_infile, SnapshotMetadata& metadata) {[m
[32m+[m[32m            // Wrong hash[m
[32m+[m[32m            metadata.m_base_blockhash = uint256::ZERO;[m
[32m+[m[32m    }));[m
     BOOST_REQUIRE(!CreateAndActivateUTXOSnapshot([m
         m_node, m_path_root, [](CAutoFile& auto_infile, SnapshotMetadata& metadata) {[m
             // Wrong hash[m
[36m@@ -269,9 +272,9 @@[m [mBOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100Setup)[m
     BOOST_REQUIRE(CreateAndActivateUTXOSnapshot(m_node, m_path_root));[m
 [m
     // Ensure our active chain is the snapshot chainstate.[m
[31m-    BOOST_CHECK(!chainman.ActiveChainstate().m_from_snapshot_blockhash.IsNull());[m
[32m+[m[32m    BOOST_CHECK(!chainman.ActiveChainstate().m_from_snapshot_blockhash->IsNull());[m
     BOOST_CHECK_EQUAL([m
[31m-        chainman.ActiveChainstate().m_from_snapshot_blockhash,[m
[32m+[m[32m        *chainman.ActiveChainstate().m_from_snapshot_blockhash,[m
         *chainman.SnapshotBlockhash());[m
 [m
     const AssumeutxoData& au_data = *ExpectedAssumeutxo(snapshot_height, ::Params());[m
[36m@@ -347,7 +350,7 @@[m [mBOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100Setup)[m
 [m
     // Snapshot blockhash should be unchanged.[m
     BOOST_CHECK_EQUAL([m
[31m-        chainman.ActiveChainstate().m_from_snapshot_blockhash,[m
[32m+[m[32m        *chainman.ActiveChainstate().m_from_snapshot_blockhash,[m
         loaded_snapshot_blockhash);[m
 }[m
 [m
[33mdiff --git a/src/test/validation_tests.cpp b/src/test/validation_tests.cpp[m
[33mindex d0317aca0..1e5baec01 100644[m
[33m--- a/src/test/validation_tests.cpp[m
[33m+++ b/src/test/validation_tests.cpp[m
[36m@@ -135,11 +135,11 @@[m [mBOOST_AUTO_TEST_CASE(test_assumeutxo)[m
     }[m
 [m
     const auto out110 = *ExpectedAssumeutxo(110, *params);[m
[31m-    BOOST_CHECK_EQUAL(out110.hash_serialized, uint256S("1ebbf5850204c0bdb15bf030f47c7fe91d45c44c712697e4509ba67adb01c618"));[m
[32m+[m[32m    BOOST_CHECK_EQUAL(out110.hash_serialized.ToString(), "1ebbf5850204c0bdb15bf030f47c7fe91d45c44c712697e4509ba67adb01c618");[m
     BOOST_CHECK_EQUAL(out110.nChainTx, (unsigned int)110);[m
 [m
     const auto out210 = *ExpectedAssumeutxo(210, *params);[m
[31m-    BOOST_CHECK_EQUAL(out210.hash_serialized, uint256S("9c5ed99ef98544b34f8920b6d1802f72ac28ae6e2bd2bd4c316ff10c230df3f2"));[m
[32m+[m[32m    BOOST_CHECK_EQUAL(out210.hash_serialized.ToString(), "9c5ed99ef98544b34f8920b6d1802f72ac28ae6e2bd2bd4c316ff10c230df3f2");[m
     BOOST_CHECK_EQUAL(out210.nChainTx, (unsigned int)210);[m
 }[m
 [m
[33mdiff --git a/src/util/hash_type.h b/src/util/hash_type.h[m
[33mnew file mode 100644[m
[33mindex 000000000..13b831cf1[m
[33m--- /dev/null[m
[33m+++ b/src/util/hash_type.h[m
[36m@@ -0,0 +1,72 @@[m
[32m+[m[32m// Copyright (c) 2020-2021 The Bitcoin Core developers[m
[32m+[m[32m// Distributed under the MIT software license, see the accompanying[m
[32m+[m[32m// file COPYING or http://www.opensource.org/licenses/mit-license.php.[m
[32m+[m
[32m+[m[32m#ifndef BITCOIN_UTIL_HASH_TYPE_H[m
[32m+[m[32m#define BITCOIN_UTIL_HASH_TYPE_H[m
[32m+[m
[32m+[m[32mtemplate <typename HashType>[m
[2m+[m[2mclass BaseHash[m
[2m+[m[2m{[m
[2m+[m[2mprotected:[m
[2m+[m[2m    HashType m_hash;[m
[2m+[m
[2m+[m[2mpublic:[m
[2m+[m[2m    BaseHash() : m_hash() {}[m
[2m+[m[2m    explicit BaseHash(const HashType& in) : m_hash(in) {}[m
[2m+[m
[2m+[m[2m    unsigned char* begin()[m
[2m+[m[2m    {[m
[2m+[m[2m        return m_hash.begin();[m
[2m+[m[2m    }[m
[2m+[m
[2m+[m[2m    const unsigned char* begin() const[m
[2m+[m[2m    {[m
[2m+[m[2m        return m_hash.begin();[m
[2m+[m[2m    }[m
[2m+[m
[2m+[m[2m    unsigned char* end()[m
[2m+[m[2m    {[m
[2m+[m[2m        return m_hash.end();[m
[2m+[m[2m    }[m
[2m+[m
[2m+[m[2m    const unsigned char* end() const[m
[2m+[m[2m    {[m
[2m+[m[2m        return m_hash.end();[m
[2m+[m[2m    }[m
[2m+[m
[2m+[m[2m    operator std::vector<unsigned char>() const[m
[2m+[m[2m    {[m
[2m+[m[2m        return std::vector<unsigned char>{m_hash.begin(), m_hash.end()};[m
[2m+[m[2m    }[m
[2m+[m
[2m+[m[2m    std::string ToString() const[m
[2m+[m[2m    {[m
[2m+[m[2m        return m_hash.ToString();[m
[2m+[m[2m    }[m
[2m+[m
[2m+[m[2m    bool operator==(const BaseHash<HashType>& other) const noexcept[m
[2m+[m[2m    {[m
[2m+[m[2m        return m_hash == other.m_hash;[m
[2m+[m[2m    }[m
[2m+[m
[2m+[m[2m    bool operator!=(const BaseHash<HashType>& other) const noexcept[m
[2m+[m[2m    {[m
[2m+[m[2m        return !(m_hash == other.m_hash);[m
[2m+[m[2m    }[m
[2m+[m
[2m+[m[2m    bool operator<(const BaseHash<HashType>& other) const noexcept[m
[2m+[m[2m    {[m
[2m+[m[2m        return m_hash < other.m_hash;[m
[2m+[m[2m    }[m
[2m+[m
[2m+[m[2m    size_t size() const[m
[2m+[m[2m    {[m
[2m+[m[2m        return m_hash.size();[m
[2m+[m[2m    }[m
[2m+[m
[2m+[m[2m    unsigned char* data() { return m_hash.data(); }[m
[2m+[m[2m    const unsigned char* data() const { return m_hash.data(); }[m
[2m+[m[2m};[m
[2m+[m
[32m+[m[32m#endif // BITCOIN_UTIL_HASH_TYPE_H[m
[33mdiff --git a/src/validation.cpp b/src/validation.cpp[m
[33mindex 639c1f687..4f9b8687b 100644[m
[33m--- a/src/validation.cpp[m
[33m+++ b/src/validation.cpp[m
[36m@@ -1158,7 +1158,7 @@[m [mvoid CoinsViews::InitCache()[m
     m_cacheview = std::make_unique<CCoinsViewCache>(&m_catcherview);[m
 }[m
 [m
[31m-CChainState::CChainState(CTxMemPool& mempool, BlockManager& blockman, uint256 from_snapshot_blockhash)[m
[32m+[m[32mCChainState::CChainState(CTxMemPool& mempool, BlockManager& blockman, std::optional<uint256> from_snapshot_blockhash)[m
     : m_mempool(mempool),[m
       m_blockman(blockman),[m
       m_from_snapshot_blockhash(from_snapshot_blockhash) {}[m
[36m@@ -1169,8 +1169,8 @@[m [mvoid CChainState::InitCoinsDB([m
     bool should_wipe,[m
     std::string leveldb_name)[m
 {[m
[31m-    if (!m_from_snapshot_blockhash.IsNull()) {[m
[31m-        leveldb_name += "_" + m_from_snapshot_blockhash.ToString();[m
[32m+[m[32m    if (m_from_snapshot_blockhash) {[m
[32m+[m[32m        leveldb_name += "_" + m_from_snapshot_blockhash->ToString();[m
     }[m
 [m
     m_coins_views = std::make_unique<CoinsViews>([m
[36m@@ -3877,7 +3877,7 @@[m [mbool CVerifyDB::VerifyDB([m
     int reportDone = 0;[m
     LogPrintf("[0%%]..."); /* Continued */[m
 [m
[31m-    bool is_snapshot_cs = !chainstate.m_from_snapshot_blockhash.IsNull();[m
[32m+[m[32m    const bool is_snapshot_cs{!chainstate.m_from_snapshot_blockhash};[m
 [m
     for (pindex = chainstate.m_chain.Tip(); pindex && pindex->pprev; pindex = pindex->pprev) {[m
         const int percentageDone = std::max(1, std::min(99, (int)(((double)(chainstate.m_chain.Height() - pindex->nHeight)) / (double)nCheckDepth * (nCheckLevel >= 4 ? 50 : 100))));[m
[36m@@ -4458,8 +4458,8 @@[m [mstd::string CChainState::ToString()[m
 {[m
     CBlockIndex* tip = m_chain.Tip();[m
     return strprintf("Chainstate [%s] @ height %d (%s)",[m
[31m-        m_from_snapshot_blockhash.IsNull() ? "ibd" : "snapshot",[m
[31m-        tip ? tip->nHeight : -1, tip ? tip->GetBlockHash().ToString() : "null");[m
[32m+[m[32m                     m_from_snapshot_blockhash ? "snapshot" : "ibd",[m
[32m+[m[32m                     tip ? tip->nHeight : -1, tip ? tip->GetBlockHash().ToString() : "null");[m
 }[m
 [m
 bool CChainState::ResizeCoinsCaches(size_t coinstip_size, size_t coinsdb_size)[m
[36m@@ -4662,10 +4662,10 @@[m [mdouble GuessVerificationProgress(const ChainTxData& data, const CBlockIndex *pin[m
     return std::min<double>(pindex->nChainTx / fTxTotal, 1.0);[m
 }[m
 [m
[31m-std::optional<uint256> ChainstateManager::SnapshotBlockhash() const {[m
[32m+[m[32mstd::optional<uint256> ChainstateManager::SnapshotBlockhash() const[m
[32m+[m[32m{[m
     LOCK(::cs_main);[m
[31m-    if (m_active_chainstate != nullptr &&[m
[31m-            !m_active_chainstate->m_from_snapshot_blockhash.IsNull()) {[m
[32m+[m[32m    if (m_active_chainstate && m_active_chainstate->m_from_snapshot_blockhash) {[m
         // If a snapshot chainstate exists, it will always be our active.[m
         return m_active_chainstate->m_from_snapshot_blockhash;[m
     }[m
[36m@@ -4688,9 +4688,9 @@[m [mstd::vector<CChainState*> ChainstateManager::GetAll()[m
     return out;[m
 }[m
 [m
[31m-CChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const uint256& snapshot_blockhash)[m
[32m+[m[32mCChainState& ChainstateManager::InitializeChainstate(CTxMemPool& mempool, const std::optional<uint256>& snapshot_blockhash)[m
 {[m
[31m-    bool is_snapshot = !snapshot_blockhash.IsNull();[m
[32m+[m[32m    bool is_snapshot = snapshot_blockhash.has_value();[m
     std::unique_ptr<CChainState>& to_modify =[m
         is_snapshot ? m_snapshot_chainstate : m_ibd_chainstate;[m
 [m
[36m@@ -4815,6 +4815,26 @@[m [mbool ChainstateManager::PopulateAndValidateSnapshot([m
 [m
     uint256 base_blockhash = metadata.m_base_blockhash;[m
 [m
[2m+[m[2m    CBlockIndex* snapshot_start_block = WITH_LOCK(::cs_main, return m_blockman.LookupBlockIndex(base_blockhash));[m
[2m+[m
[2m+[m[2m    if (!snapshot_start_block) {[m
[32m+[m[32m        // Needed for GetUTXOStats and ExpectedAssumeutxo to determine the height and to avoid a crash when base_blockhash.IsNull()[m
[2;3m+[m[2;3m        LogPrintf("[snapshot] Did not find snapshot start blockheader %s\n",[m
[2;3m+[m[2;3m                  base_blockhash.ToString());[m
[2;3m+[m[2;3m        return false;[m
[2;3m+[m[2;3m    }[m
[1;33m+[m
[1;36m+[m[1;36m    int base_height = snapshot_start_block->nHeight;[m
[2m+[m[2m    auto maybe_au_data = ExpectedAssumeutxo(base_height, ::Params());[m
[2m+[m
[2m+[m[2m    if (!maybe_au_data) {[m
[2m+[m[2m        LogPrintf("[snapshot] assumeutxo height in snapshot metadata not recognized " /* Continued */[m
[32m+[m[32m                  "(%d) - refusing to load snapshot\n", base_height);[m
[2;3m+[m[2;3m        return false;[m
[2;3m+[m[2;3m    }[m
[2;3m+[m
[2;3m+[m[2;3m    const AssumeutxoData& au_data = *maybe_au_data;[m
[2;3m+[m
     COutPoint outpoint;[m
     Coin coin;[m
     const uint64_t coins_count = metadata.m_coins_count;[m
[36m@@ -4905,15 +4925,6 @@[m [mbool ChainstateManager::PopulateAndValidateSnapshot([m
 [m
     assert(coins_cache.GetBestBlock() == base_blockhash);[m
 [m
[2m-    CBlockIndex* snapshot_start_block = WITH_LOCK(::cs_main, return m_blockman.LookupBlockIndex(base_blockhash));[m
[2m-[m
[2m-    if (!snapshot_start_block) {[m
[31m-        // Needed for GetUTXOStats to determine the height[m
[2;3m-        LogPrintf("[snapshot] Did not find snapshot start blockheader %s\n",[m
[2;3m-                  base_blockhash.ToString());[m
[2;3m-        return false;[m
[2;3m-    }[m
[2;3m-[m
     CCoinsStats stats{CoinStatsHashType::HASH_SERIALIZED};[m
     auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };[m
 [m
[36m@@ -4927,19 +4938,7 @@[m [mbool ChainstateManager::PopulateAndValidateSnapshot([m
     }[m
 [m
     // Assert that the deserialized chainstate contents match the expected assumeutxo value.[m
[2m-[m
[2m-    int base_height = snapshot_start_block->nHeight;[m
[2m-    auto maybe_au_data = ExpectedAssumeutxo(base_height, ::Params());[m
[2m-[m
[2m-    if (!maybe_au_data) {[m
[2m-        LogPrintf("[snapshot] assumeutxo height in snapshot metadata not recognized " /* Continued */[m
[31m-            "(%d) - refusing to load snapshot\n", base_height);[m
[2;3m-        return false;[m
[2;3m-    }[m
[2;3m-[m
[2;3m-    const AssumeutxoData& au_data = *maybe_au_data;[m
[2;3m-[m
[31m-    if (stats.hashSerialized != au_data.hash_serialized) {[m
[32m+[m[32m    if (AssumeutxoHash{stats.hashSerialized} != au_data.hash_serialized) {[m
         LogPrintf("[snapshot] bad snapshot content hash: expected %s, got %s\n",[m
             au_data.hash_serialized.ToString(), stats.hashSerialized.ToString());[m
         return false;[m
[33mdiff --git a/src/validation.h b/src/validation.h[m
[33mindex 8fa45c3f7..1b5064418 100644[m
[33m--- a/src/validation.h[m
[33m+++ b/src/validation.h[m
[36m@@ -553,7 +553,7 @@[m [mpublic:[m
     //! CChainState instances.[m
     BlockManager& m_blockman;[m
 [m
[31m-    explicit CChainState(CTxMemPool& mempool, BlockManager& blockman, uint256 from_snapshot_blockhash = uint256());[m
[32m+[m[32m    explicit CChainState(CTxMemPool& mempool, BlockManager& blockman, std::optional<uint256> from_snapshot_blockhash = std::nullopt);[m
 [m
     /**[m
      * Initialize the CoinsViews UTXO set database management data structures. The in-memory[m
[36m@@ -584,9 +584,9 @@[m [mpublic:[m
     /**[m
      * The blockhash which is the base of the snapshot this chainstate was created from.[m
      *[m
[31m-     * IsNull() if this chainstate was not created from a snapshot.[m
[32m+[m[32m     * std::nullopt if this chainstate was not created from a snapshot.[m
      */[m
[31m-    const uint256 m_from_snapshot_blockhash{};[m
[32m+[m[32m    const std::optional<uint256> m_from_snapshot_blockhash;[m
 [m
     /**[m
      * The set of all CBlockIndex entries with BLOCK_VALID_TRANSACTIONS (for itself and all ancestors) and[m
[36m@@ -866,7 +866,7 @@[m [mpublic:[m
     //                                  constructor[m
     //! @param[in] snapshot_blockhash   If given, signify that this chainstate[m
     //!                                 is based on a snapshot.[m
[31m-    CChainState& InitializeChainstate(CTxMemPool& mempool, const uint256& snapshot_blockhash = uint256())[m
[32m+[m[32m    CChainState& InitializeChainstate(CTxMemPool& mempool, const std::optional<uint256>& snapshot_blockhash = std::nullopt)[m
         EXCLUSIVE_LOCKS_REQUIRED(::cs_main);[m
 [m
     //! Get all chainstates currently being used.[m