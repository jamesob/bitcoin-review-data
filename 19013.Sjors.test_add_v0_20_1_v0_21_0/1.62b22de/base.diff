[33mdiff --git a/ci/test/00_setup_env_native_qt5.sh b/ci/test/00_setup_env_native_qt5.sh[m
[33mindex 14b7b98782..1997fe390b 100755[m
[33m--- a/ci/test/00_setup_env_native_qt5.sh[m
[33m+++ b/ci/test/00_setup_env_native_qt5.sh[m
[36m@@ -14,6 +14,6 @@[m [mexport TEST_RUNNER_EXTRA="--previous-releases --coverage --extended --exclude fe[m
 export RUN_UNIT_TESTS_SEQUENTIAL="true"[m
 export RUN_UNIT_TESTS="false"[m
 export GOAL="install"[m
[31m-export PREVIOUS_RELEASES_TO_DOWNLOAD="v0.15.2 v0.16.3 v0.17.2 v0.18.1 v0.19.1 v0.20.1"[m
[32m+[m[32mexport PREVIOUS_RELEASES_TO_DOWNLOAD="v0.15.2 v0.16.3 v0.17.2 v0.18.1 v0.19.1 v0.20.1 v0.21.0 v22.0"[m
 export BITCOIN_CONFIG="--enable-zmq --with-libs=no --with-gui=qt5 --enable-reduce-exports \[m
 --enable-debug --disable-fuzz-binary  CFLAGS=\"-g0 -O2 -funsigned-char\" CXXFLAGS=\"-g0 -O2 -funsigned-char\" CC=gcc-8 CXX=g++-8"[m
[33mdiff --git a/test/README.md b/test/README.md[m
[33mindex c9e15c4968..8fffde888d 100644[m
[33m--- a/test/README.md[m
[33m+++ b/test/README.md[m
[36m@@ -98,7 +98,7 @@[m [mtest/functional/test_runner.py --extended[m
 In order to run backwards compatibility tests, download the previous node binaries:[m
 [m
 ```[m
[31m-test/get_previous_releases.py -b v0.20.1 v0.19.1 v0.18.1 v0.17.2 v0.16.3 v0.15.2[m
[32m+[m[32mtest/get_previous_releases.py -b v22.0 v0.21.0 v0.20.1 v0.19.1 v0.18.1 v0.17.2 v0.16.3 v0.15.2[m
 ```[m
 [m
 By default, up to 4 tests will be run in parallel by test_runner. To specify[m
[33mdiff --git a/test/functional/feature_backwards_compatibility.py b/test/functional/feature_backwards_compatibility.py[m
[33mindex e65525a023..c23ecd28d0 100755[m
[33m--- a/test/functional/feature_backwards_compatibility.py[m
[33m+++ b/test/functional/feature_backwards_compatibility.py[m
[36m@@ -34,11 +34,14 @@[m [mfrom test_framework.util import ([m
 class BackwardsCompatibilityTest(BitcoinTestFramework):[m
     def set_test_params(self):[m
         self.setup_clean_chain = True[m
[31m-        self.num_nodes = 6[m
[32m+[m[32m        self.num_nodes = 9[m
         # Add new version after each release:[m
         self.extra_args = [[m
             ["-addresstype=bech32"], # Pre-release: use to mine blocks[m
             ["-nowallet", "-walletrbf=1", "-addresstype=bech32"], # Pre-release: use to receive coins, swap wallets, etc[m
[32m+[m[32m            ["-nowallet", "-walletrbf=1", "-addresstype=bech32"], # v22.0[m
[32m+[m[32m            ["-nowallet", "-walletrbf=1", "-addresstype=bech32"], # v0.21.0[m
[32m+[m[32m            ["-nowallet", "-walletrbf=1", "-addresstype=bech32"], # v0.20.1[m
             ["-nowallet", "-walletrbf=1", "-addresstype=bech32"], # v0.19.1[m
             ["-nowallet", "-walletrbf=1", "-addresstype=bech32"], # v0.18.1[m
             ["-nowallet", "-walletrbf=1", "-addresstype=bech32"], # v0.17.2[m
[36m@@ -54,6 +57,9 @@[m [mclass BackwardsCompatibilityTest(BitcoinTestFramework):[m
         self.add_nodes(self.num_nodes, extra_args=self.extra_args, versions=[[m
             None,[m
             None,[m
[32m+[m[32m            220000,[m
[32m+[m[32m            210000,[m
[32m+[m[32m            200100,[m
             190100,[m
             180100,[m
             170200,[m
[36m@@ -63,6 +69,11 @@[m [mclass BackwardsCompatibilityTest(BitcoinTestFramework):[m
         self.start_nodes()[m
         self.import_deterministic_coinbase_privkeys()[m
 [m
[32m+[m[32m    def nodes_wallet_dir(self, node):[m
[32m+[m[32m        if node.version < 170000:[m
[32m+[m[32m            return os.path.join(node.datadir, "regtest")[m
[32m+[m[32m        return os.path.join(node.datadir, "regtest/wallets")[m
[32m+[m
     def run_test(self):[m
         self.generatetoaddress(self.nodes[0], COINBASE_MATURITY + 1, self.nodes[0].getnewaddress())[m
 [m
[36m@@ -72,7 +83,7 @@[m [mclass BackwardsCompatibilityTest(BitcoinTestFramework):[m
         res = self.nodes[self.num_nodes - 1].getblockchaininfo()[m
         assert_equal(res['blocks'], COINBASE_MATURITY + 1)[m
 [m
[31m-        node_master = self.nodes[self.num_nodes - 5][m
[32m+[m[32m        node_master = self.nodes[1][m
         node_v19 = self.nodes[self.num_nodes - 4][m
         node_v18 = self.nodes[self.num_nodes - 3][m
         node_v17 = self.nodes[self.num_nodes - 2][m
[36m@@ -117,6 +128,7 @@[m [mclass BackwardsCompatibilityTest(BitcoinTestFramework):[m
         # Use addmultisigaddress (see #18075)[m
         address_18075 = wallet.rpc.addmultisigaddress(1, ["0296b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52", "037211a824f55b505228e4c3d5194c1fcfaa15a456abdf37f9b9d97a4040afc073"], "", "legacy")["address"][m
         assert wallet.getaddressinfo(address_18075)["solvable"][m
[2m+[m[2m        node_v19.unloadwallet("w1_v19")[m
 [m
         # w1_v18: regular wallet, created with v0.18[m
         node_v18.rpc.createwallet(wallet_name="w1_v18")[m
[36m@@ -134,20 +146,6 @@[m [mclass BackwardsCompatibilityTest(BitcoinTestFramework):[m
         assert info['private_keys_enabled'] == False[m
         assert info['keypoolsize'] == 0[m
 [m
[31m-        # w2_v19: wallet with private keys disabled, created with v0.19[m
[31m-        node_v19.rpc.createwallet(wallet_name="w2_v19", disable_private_keys=True)[m
[31m-        wallet = node_v19.get_wallet_rpc("w2_v19")[m
[31m-        info = wallet.getwalletinfo()[m
[31m-        assert info['private_keys_enabled'] == False[m
[31m-        assert info['keypoolsize'] == 0[m
[31m-[m
[31m-        # w2_v18: wallet with private keys disabled, created with v0.18[m
[31m-        node_v18.rpc.createwallet(wallet_name="w2_v18", disable_private_keys=True)[m
[31m-        wallet = node_v18.get_wallet_rpc("w2_v18")[m
[31m-        info = wallet.getwalletinfo()[m
[31m-        assert info['private_keys_enabled'] == False[m
[31m-        assert info['keypoolsize'] == 0[m
[31m-[m
         # w3: blank wallet, created on master: update this[m
         #     test when default blank wallets can no longer be opened by older versions.[m
         node_master.createwallet(wallet_name="w3", blank=True)[m
[36m@@ -156,170 +154,72 @@[m [mclass BackwardsCompatibilityTest(BitcoinTestFramework):[m
         assert info['private_keys_enabled'][m
         assert info['keypoolsize'] == 0[m
 [m
[31m-        # w3_v19: blank wallet, created with v0.19[m
[31m-        node_v19.rpc.createwallet(wallet_name="w3_v19", blank=True)[m
[31m-        wallet = node_v19.get_wallet_rpc("w3_v19")[m
[31m-        info = wallet.getwalletinfo()[m
[31m-        assert info['private_keys_enabled'][m
[31m-        assert info['keypoolsize'] == 0[m
[31m-[m
[31m-        # w3_v18: blank wallet, created with v0.18[m
[31m-        node_v18.rpc.createwallet(wallet_name="w3_v18", blank=True)[m
[31m-        wallet = node_v18.get_wallet_rpc("w3_v18")[m
[31m-        info = wallet.getwalletinfo()[m
[31m-        assert info['private_keys_enabled'][m
[31m-        assert info['keypoolsize'] == 0[m
[31m-[m
[31m-        # Copy the wallets to older nodes:[m
[32m+[m[32m        # Unload wallets and copy to older nodes:[m
         node_master_wallets_dir = os.path.join(node_master.datadir, "regtest/wallets")[m
         node_v19_wallets_dir = os.path.join(node_v19.datadir, "regtest/wallets")[m
[31m-        node_v18_wallets_dir = os.path.join(node_v18.datadir, "regtest/wallets")[m
         node_v17_wallets_dir = os.path.join(node_v17.datadir, "regtest/wallets")[m
         node_v16_wallets_dir = os.path.join(node_v16.datadir, "regtest")[m
         node_master.unloadwallet("w1")[m
         node_master.unloadwallet("w2")[m
[2m-        node_v19.unloadwallet("w1_v19")[m
[31m-        node_v19.unloadwallet("w2_v19")[m
[31m-        node_v18.unloadwallet("w1_v18")[m
[31m-        node_v18.unloadwallet("w2_v18")[m
[32m+[m[32m        node_master.unloadwallet("w3")[m
 [m
[31m-        # Copy wallets to v0.16[m
[31m-        for wallet in os.listdir(node_master_wallets_dir):[m
[31m-            shutil.copytree([m
[31m-                os.path.join(node_master_wallets_dir, wallet),[m
[31m-                os.path.join(node_v16_wallets_dir, wallet)[m
[31m-            )[m
[31m-[m
[31m-        # Copy wallets to v0.17[m
[31m-        for wallet in os.listdir(node_master_wallets_dir):[m
[31m-            shutil.copytree([m
[31m-                os.path.join(node_master_wallets_dir, wallet),[m
[31m-                os.path.join(node_v17_wallets_dir, wallet)[m
[31m-            )[m
[31m-        for wallet in os.listdir(node_v18_wallets_dir):[m
[31m-            shutil.copytree([m
[31m-                os.path.join(node_v18_wallets_dir, wallet),[m
[31m-                os.path.join(node_v17_wallets_dir, wallet)[m
[31m-            )[m
[31m-[m
[31m-        # Copy wallets to v0.18[m
[31m-        for wallet in os.listdir(node_master_wallets_dir):[m
[31m-            shutil.copytree([m
[31m-                os.path.join(node_master_wallets_dir, wallet),[m
[31m-                os.path.join(node_v18_wallets_dir, wallet)[m
[31m-            )[m
[31m-[m
[31m-        # Copy wallets to v0.19[m
[31m-        for wallet in os.listdir(node_master_wallets_dir):[m
[31m-            shutil.copytree([m
[31m-                os.path.join(node_master_wallets_dir, wallet),[m
[31m-                os.path.join(node_v19_wallets_dir, wallet)[m
[31m-            )[m
[32m+[m[32m        for node in self.nodes[2:]:[m
[32m+[m[32m            # Copy wallets to previous version[m
[32m+[m[32m            for wallet in os.listdir(node_master_wallets_dir):[m
[32m+[m[32m                shutil.copytree([m
[32m+[m[32m                    os.path.join(node_master_wallets_dir, wallet),[m
[32m+[m[32m                    os.path.join(self.nodes_wallet_dir(node), wallet)[m
[32m+[m[32m                )[m
 [m
         if not self.options.descriptors:[m
             # Descriptor wallets break compatibility, only run this test for legacy wallet[m
[31m-            # Open the wallets in v0.19[m
[31m-            node_v19.loadwallet("w1")[m
[31m-            wallet = node_v19.get_wallet_rpc("w1")[m
[31m-            info = wallet.getwalletinfo()[m
[31m-            assert info['private_keys_enabled'][m
[31m-            assert info['keypoolsize'] > 0[m
[31m-            txs = wallet.listtransactions()[m
[31m-            assert_equal(len(txs), 5)[m
[31m-            assert_equal(txs[1]["txid"], tx1_id)[m
[31m-            assert_equal(txs[2]["walletconflicts"], [tx1_id])[m
[31m-            assert_equal(txs[1]["replaced_by_txid"], tx2_id)[m
[31m-            assert not(txs[1]["abandoned"])[m
[31m-            assert_equal(txs[1]["confirmations"], -1)[m
[31m-            assert_equal(txs[2]["blockindex"], 1)[m
[31m-            assert txs[3]["abandoned"][m
[31m-            assert_equal(txs[4]["walletconflicts"], [tx3_id])[m
[31m-            assert_equal(txs[3]["replaced_by_txid"], tx4_id)[m
[31m-            assert not(hasattr(txs[3], "blockindex"))[m
[31m-[m
[31m-            node_v19.loadwallet("w2")[m
[31m-            wallet = node_v19.get_wallet_rpc("w2")[m
[31m-            info = wallet.getwalletinfo()[m
[31m-            assert info['private_keys_enabled'] == False[m
[31m-            assert info['keypoolsize'] == 0[m
[31m-[m
[31m-            node_v19.loadwallet("w3")[m
[31m-            wallet = node_v19.get_wallet_rpc("w3")[m
[31m-            info = wallet.getwalletinfo()[m
[31m-            assert info['private_keys_enabled'][m
[31m-            assert info['keypoolsize'] == 0[m
[31m-[m
[31m-            # Open the wallets in v0.18[m
[31m-            node_v18.loadwallet("w1")[m
[31m-            wallet = node_v18.get_wallet_rpc("w1")[m
[31m-            info = wallet.getwalletinfo()[m
[31m-            assert info['private_keys_enabled'][m
[31m-            assert info['keypoolsize'] > 0[m
[31m-            txs = wallet.listtransactions()[m
[31m-            assert_equal(len(txs), 5)[m
[31m-            assert_equal(txs[1]["txid"], tx1_id)[m
[31m-            assert_equal(txs[2]["walletconflicts"], [tx1_id])[m
[31m-            assert_equal(txs[1]["replaced_by_txid"], tx2_id)[m
[31m-            assert not(txs[1]["abandoned"])[m
[31m-            assert_equal(txs[1]["confirmations"], -1)[m
[31m-            assert_equal(txs[2]["blockindex"], 1)[m
[31m-            assert txs[3]["abandoned"][m
[31m-            assert_equal(txs[4]["walletconflicts"], [tx3_id])[m
[31m-            assert_equal(txs[3]["replaced_by_txid"], tx4_id)[m
[31m-            assert not(hasattr(txs[3], "blockindex"))[m
[31m-[m
[31m-            node_v18.loadwallet("w2")[m
[31m-            wallet = node_v18.get_wallet_rpc("w2")[m
[31m-            info = wallet.getwalletinfo()[m
[31m-            assert info['private_keys_enabled'] == False[m
[31m-            assert info['keypoolsize'] == 0[m
[31m-[m
[31m-            node_v18.loadwallet("w3")[m
[31m-            wallet = node_v18.get_wallet_rpc("w3")[m
[31m-            info = wallet.getwalletinfo()[m
[31m-            assert info['private_keys_enabled'][m
[31m-            assert info['keypoolsize'] == 0[m
[31m-[m
[31m-            node_v17.loadwallet("w1")[m
[31m-            wallet = node_v17.get_wallet_rpc("w1")[m
[31m-            info = wallet.getwalletinfo()[m
[31m-            assert info['private_keys_enabled'][m
[31m-            assert info['keypoolsize'] > 0[m
[31m-[m
[31m-            node_v17.loadwallet("w2")[m
[31m-            wallet = node_v17.get_wallet_rpc("w2")[m
[31m-            info = wallet.getwalletinfo()[m
[31m-            assert info['private_keys_enabled'] == False[m
[31m-            assert info['keypoolsize'] == 0[m
[32m+[m[32m            # Load modern wallet with older nodes[m
[32m+[m[32m            for node in self.nodes[2:]:[m
[32m+[m[32m              for wallet_name in ["w1", "w2", "w3"]:[m
[32m+[m[32m                if node.version < 170000:[m
[32m+[m[32m                    # loadwallet was introduced in v0.17.0[m
[32m+[m[32m                    continue[m
[32m+[m[32m                if node.version < 180000 and wallet_name == "w3":[m
[32m+[m[32m                    # Blank wallets were introduced in v0.18.0. We test the loading error below.[m
[32m+[m[32m                    continue[m
[32m+[m[32m                node.loadwallet(wallet_name)[m
[32m+[m[32m                wallet = node.get_wallet_rpc(wallet_name)[m
[32m+[m[32m                info = wallet.getwalletinfo()[m
[32m+[m[32m                if wallet_name == "w1":[m
[32m+[m[32m                    assert info['private_keys_enabled'] == True[m
[32m+[m[32m                    assert info['keypoolsize'] > 0[m
[32m+[m[32m                    txs = wallet.listtransactions()[m
[32m+[m[32m                    assert_equal(len(txs), 5)[m
[32m+[m[32m                    assert_equal(txs[1]["txid"], tx1_id)[m
[32m+[m[32m                    assert_equal(txs[2]["walletconflicts"], [tx1_id])[m
[32m+[m[32m                    assert_equal(txs[1]["replaced_by_txid"], tx2_id)[m
[32m+[m[32m                    assert not(txs[1]["abandoned"])[m
[32m+[m[32m                    assert_equal(txs[1]["confirmations"], -1)[m
[32m+[m[32m                    assert_equal(txs[2]["blockindex"], 1)[m
[32m+[m[32m                    assert txs[3]["abandoned"][m
[32m+[m[32m                    assert_equal(txs[4]["walletconflicts"], [tx3_id])[m
[32m+[m[32m                    assert_equal(txs[3]["replaced_by_txid"], tx4_id)[m
[32m+[m[32m                    assert not(hasattr(txs[3], "blockindex"))[m
[32m+[m[32m                elif wallet_name == "w2":[m
[32m+[m[32m                    assert(info['private_keys_enabled'] == False)[m
[32m+[m[32m                    assert info['keypoolsize'] == 0[m
[32m+[m[32m                else:[m
[32m+[m[32m                    assert(info['private_keys_enabled'] == True)[m
[32m+[m[32m                    assert info['keypoolsize'] == 0[m
         else:[m
[31m-            # Descriptor wallets appear to be corrupted wallets to old software[m
[31m-            assert_raises_rpc_error(-4, "Wallet file verification failed: wallet.dat corrupt, salvage failed", node_v19.loadwallet, "w1")[m
[31m-            assert_raises_rpc_error(-4, "Wallet file verification failed: wallet.dat corrupt, salvage failed", node_v19.loadwallet, "w2")[m
[31m-            assert_raises_rpc_error(-4, "Wallet file verification failed: wallet.dat corrupt, salvage failed", node_v19.loadwallet, "w3")[m
[31m-            assert_raises_rpc_error(-4, "Wallet file verification failed: wallet.dat corrupt, salvage failed", node_v18.loadwallet, "w1")[m
[31m-            assert_raises_rpc_error(-4, "Wallet file verification failed: wallet.dat corrupt, salvage failed", node_v18.loadwallet, "w2")[m
[31m-            assert_raises_rpc_error(-4, "Wallet file verification failed: wallet.dat corrupt, salvage failed", node_v18.loadwallet, "w3")[m
[31m-[m
[31m-        # Open the wallets in v0.17[m
[31m-        node_v17.loadwallet("w1_v18")[m
[31m-        wallet = node_v17.get_wallet_rpc("w1_v18")[m
[31m-        info = wallet.getwalletinfo()[m
[31m-        assert info['private_keys_enabled'][m
[31m-        assert info['keypoolsize'] > 0[m
[31m-[m
[31m-        node_v17.loadwallet("w2_v18")[m
[31m-        wallet = node_v17.get_wallet_rpc("w2_v18")[m
[31m-        info = wallet.getwalletinfo()[m
[31m-        assert info['private_keys_enabled'] == False[m
[31m-        assert info['keypoolsize'] == 0[m
[32m+[m[32m            for node in self.nodes[2:-1]:[m
[32m+[m[32m                # Descriptor wallets appear to be corrupted wallets to old software[m
[32m+[m[32m                # and loadwallet is introduced in v0.17.0[m
[32m+[m[32m                if node.version >= 170000 and node.version < 210000:[m
[32m+[m[32m                    for wallet_name in ["w1", "w2", "w3"]:[m
[32m+[m[32m                        assert_raises_rpc_error(-4, "Wallet file verification failed: wallet.dat corrupt, salvage failed", node.loadwallet, wallet_name)[m
 [m
         # RPC loadwallet failure causes bitcoind to exit, in addition to the RPC[m
         # call failure, so the following test won't work:[m
[31m-        # assert_raises_rpc_error(-4, "Wallet loading failed.", node_v17.loadwallet, 'w3_v18')[m
[32m+[m[32m        # assert_raises_rpc_error(-4, "Wallet loading failed.", node_v17.loadwallet, 'w3')[m
 [m
         # Instead, we stop node and try to launch it with the wallet:[m
[31m-        self.stop_node(4)[m
[31m-        node_v17.assert_start_raises_init_error(["-wallet=w3_v18"], "Error: Error loading w3_v18: Wallet requires newer version of Bitcoin Core")[m
[32m+[m[32m        self.stop_node(-2)[m
         if self.options.descriptors:[m
             # Descriptor wallets appear to be corrupted wallets to old software[m
             node_v17.assert_start_raises_init_error(["-wallet=w1"], "Error: wallet.dat corrupt, salvage failed")[m
[36m@@ -327,12 +227,12 @@[m [mclass BackwardsCompatibilityTest(BitcoinTestFramework):[m
             node_v17.assert_start_raises_init_error(["-wallet=w3"], "Error: wallet.dat corrupt, salvage failed")[m
         else:[m
             node_v17.assert_start_raises_init_error(["-wallet=w3"], "Error: Error loading w3: Wallet requires newer version of Bitcoin Core")[m
[31m-        self.start_node(4)[m
[32m+[m[32m        self.start_node(-2)[m
 [m
         if not self.options.descriptors:[m
             # Descriptor wallets break compatibility, only run this test for legacy wallets[m
             # Open most recent wallet in v0.16 (no loadwallet RPC)[m
[31m-            self.restart_node(5, extra_args=["-wallet=w2"])[m
[32m+[m[32m            self.restart_node(-1, extra_args=["-wallet=w2"])[m
             wallet = node_v16.get_wallet_rpc("w2")[m
             info = wallet.getwalletinfo()[m
             assert info['keypoolsize'] == 1[m
[33mdiff --git a/test/functional/test_framework/test_framework.py b/test/functional/test_framework/test_framework.py[m
[33mindex b18c050e0a..c438fb48ed 100755[m
[33m--- a/test/functional/test_framework/test_framework.py[m
[33m+++ b/test/functional/test_framework/test_framework.py[m
[36m@@ -447,11 +447,13 @@[m [mclass BitcoinTestFramework(metaclass=BitcoinTestMetaClass):[m
         def get_bin_from_version(version, bin_name, bin_default):[m
             if not version:[m
                 return bin_default[m
[32m+[m[32m            if version > 219999:[m
[32m+[m[32m                version *= 100[m
             return os.path.join([m
                 self.options.previous_releases_path,[m
                 re.sub([m
[31m-                    r'\.0$',[m
[31m-                    '',  # remove trailing .0 for point releases[m
[32m+[m[32m                    r'\.0$' if version <= 219999 else r'(\.0){1,2}$',[m
[32m+[m[32m                    '', # Remove trailing dot for point releases, after 22.0 also remove double trailing dot.[m
                     'v{}.{}.{}.{}'.format([m
                         (version % 100000000) // 1000000,[m
                         (version % 1000000) // 10000,[m
[36m@@ -473,7 +475,7 @@[m [mclass BitcoinTestFramework(metaclass=BitcoinTestMetaClass):[m
             versions = [None] * num_nodes[m
         if self.is_syscall_sandbox_compiled() and not self.disable_syscall_sandbox:[m
             for i in range(len(extra_args)):[m
[31m-                if versions[i] is None or versions[i] >= 219900:[m
[32m+[m[32m                if versions[i] is None or versions[i] >= 229900:[m
                     extra_args[i] = extra_args[i] + ["-sandbox=log-and-abort"][m
         if binary is None:[m
             binary = [get_bin_from_version(v, 'bitcoind', self.options.bitcoind) for v in versions][m
[33mdiff --git a/test/get_previous_releases.py b/test/get_previous_releases.py[m
[33mindex 62fcad04b3..4cae55c2dd 100755[m
[33m--- a/test/get_previous_releases.py[m
[33m+++ b/test/get_previous_releases.py[m
[36m@@ -23,32 +23,27 @@[m [mimport hashlib[m
 SHA256_SUMS = {[m
     "d40f18b4e43c6e6370ef7db9131f584fbb137276ec2e3dba67a4b267f81cb644": "bitcoin-0.15.2-aarch64-linux-gnu.tar.gz",[m
     "54fb877a148a6ad189a1e1ab1ff8b11181e58ff2aaf430da55b3fd46ae549a6b": "bitcoin-0.15.2-arm-linux-gnueabihf.tar.gz",[m
[31m-    "2b843506c3f1af0eeca5854a920264f9a829f02d0d50328005950ddcbe88874d": "bitcoin-0.15.2-i686-pc-linux-gnu.tar.gz",[m
     "87e9340ff3d382d543b2b69112376077f0c8b4f7450d372e83b68f5a1e22b2df": "bitcoin-0.15.2-osx64.tar.gz",[m
     "566be44190fd76daa01f13d428939dadfb8e3daacefc8fa17f433cad28f73bd5": "bitcoin-0.15.2-x86_64-linux-gnu.tar.gz",[m
     #[m
     "0768c6c15caffbaca6524824c9563b42c24f70633c681c2744649158aa3fd484": "bitcoin-0.16.3-aarch64-linux-gnu.tar.gz",[m
     "fb2818069854a6ad20ea03b28b55dbd35d8b1f7d453e90b83eace5d0098a2a87": "bitcoin-0.16.3-arm-linux-gnueabihf.tar.gz",[m
[31m-    "75a537844313b0a84bdb61ffcdc5c4ce19a738f7ddf71007cd2edf664efd7c37": "bitcoin-0.16.3-i686-pc-linux-gnu.tar.gz",[m
     "78c3bff3b619a19aed575961ea43cc9e142959218835cf51aede7f0b764fc25d": "bitcoin-0.16.3-osx64.tar.gz",[m
     "5d422a9d544742bc0df12427383f9c2517433ce7b58cf672b9a9b17c2ef51e4f": "bitcoin-0.16.3-x86_64-linux-gnu.tar.gz",[m
     #[m
     "5a6b35d1a348a402f2d2d6ab5aed653a1a1f13bc63aaaf51605e3501b0733b7a": "bitcoin-0.17.2-aarch64-linux-gnu.tar.gz",[m
     "d1913a5d19c8e8da4a67d1bd5205d03c8614dfd2e02bba2fe3087476643a729e": "bitcoin-0.17.2-arm-linux-gnueabihf.tar.gz",[m
[31m-    "d295fc93f39bbf0fd937b730a93184899a2eb6c3a6d53f3d857cbe77ef89b98c": "bitcoin-0.17.2-i686-pc-linux-gnu.tar.gz",[m
     "a783ba20706dbfd5b47fbedf42165fce70fbbc7d78003305d964f6b3da14887f": "bitcoin-0.17.2-osx64.tar.gz",[m
     "943f9362b9f11130177839116f48f809d83478b4c28591d486ee9a7e35179da6": "bitcoin-0.17.2-x86_64-linux-gnu.tar.gz",[m
     #[m
     "88f343af72803b851c7da13874cc5525026b0b55e63e1b5e1298390c4688adc6": "bitcoin-0.18.1-aarch64-linux-gnu.tar.gz",[m
     "cc7d483e4b20c5dabd4dcaf304965214cf4934bcc029ca99cbc9af00d3771a1f": "bitcoin-0.18.1-arm-linux-gnueabihf.tar.gz",[m
[31m-    "989e847b3e95fc9fedc0b109cae1b4fa43348f2f712e187a118461876af9bd16": "bitcoin-0.18.1-i686-pc-linux-gnu.tar.gz",[m
     "b7bbcee7a7540f711b171d6981f939ca8482005fde22689bc016596d80548bb1": "bitcoin-0.18.1-osx64.tar.gz",[m
     "425ee5ec631ae8da71ebc1c3f5c0269c627cf459379b9b030f047107a28e3ef8": "bitcoin-0.18.1-riscv64-linux-gnu.tar.gz",[m
     "600d1db5e751fa85903e935a01a74f5cc57e1e7473c15fd3e17ed21e202cfe5a": "bitcoin-0.18.1-x86_64-linux-gnu.tar.gz",[m
     #[m
     "3a80431717842672df682bdb619e66523b59541483297772a7969413be3502ff": "bitcoin-0.19.1-aarch64-linux-gnu.tar.gz",[m
     "657f28213823d240dd3324d14829702f9ad6f0710f8bdd1c379cb3c447197f48": "bitcoin-0.19.1-arm-linux-gnueabihf.tar.gz",[m
[31m-    "10d1e53208aa7603022f4acc084a046299ab4ccf25fe01e81b3fb6f856772589": "bitcoin-0.19.1-i686-pc-linux-gnu.tar.gz",[m
     "1ae1b87de26487075cd2fd22e0d4ead87d969bd55c44f2f1d873ecdc6147ebb3": "bitcoin-0.19.1-osx64.tar.gz",[m
     "aa7a9563b48aa79252c8e7b6a41c07a5441bd9f14c5e4562cc72720ea6cb0ee5": "bitcoin-0.19.1-riscv64-linux-gnu.tar.gz",[m
     "5fcac9416e486d4960e1a946145566350ca670f9aaba99de6542080851122e4c": "bitcoin-0.19.1-x86_64-linux-gnu.tar.gz",[m
[36m@@ -56,9 +51,22 @@[m [mSHA256_SUMS = {[m
     "60c93e3462c303eb080be7cf623f1a7684b37fd47a018ad3848bc23e13c84e1c": "bitcoin-0.20.1-aarch64-linux-gnu.tar.gz",[m
     "55b577e0fb306fb429d4be6c9316607753e8543e5946b542d75d876a2f08654c": "bitcoin-0.20.1-arm-linux-gnueabihf.tar.gz",[m
     "b9024dde373ea7dad707363e07ec7e265383204127539ae0c234bff3a61da0d1": "bitcoin-0.20.1-osx64.tar.gz",[m
[31m-    "c378d4e21109f09e8829f3591e015c66632dff2925a60b64d259be05a334c30b": "bitcoin-0.20.1-osx.dmg",[m
     "fa71cb52ee5e0459cbf5248cdec72df27995840c796f58b304607a1ed4c165af": "bitcoin-0.20.1-riscv64-linux-gnu.tar.gz",[m
     "376194f06596ecfa40331167c39bc70c355f960280bd2a645fdbf18f66527397": "bitcoin-0.20.1-x86_64-linux-gnu.tar.gz",[m
[32m+[m
[32m+[m[32m    "43416854330914992bbba2d0e9adf2a6fff4130be9af8ae2ef1186e743d9a3fe": "bitcoin-0.21.0-aarch64-linux-gnu.tar.gz",[m
[32m+[m[32m    "f028af308eda45a3c4c90f9332f96b075bf21e3495c945ebce48597151808176": "bitcoin-0.21.0-arm-linux-gnueabihf.tar.gz",[m
[32m+[m[32m    "695fb624fa6423f5da4f443b60763dd1d77488bfe5ef63760904a7b54e91298d": "bitcoin-0.21.0-osx64.tar.gz",[m
[32m+[m[32m    "f8b2adfeae021a672effbc7bd40d5c48d6b94e53b2dd660f787340bf1a52e4e9": "bitcoin-0.21.0-riscv64-linux-gnu.tar.gz",[m
[32m+[m[32m    "da7766775e3f9c98d7a9145429f2be8297c2672fe5b118fd3dc2411fb48e0032": "bitcoin-0.21.0-x86_64-linux-gnu.tar.gz",[m
[32m+[m
[32m+[m[32m    "ac718fed08570a81b3587587872ad85a25173afa5f9fbbd0c03ba4d1714cfa3e": "bitcoin-22.0-aarch64-linux-gnu.tar.gz",[m
[32m+[m[32m    "b8713c6c5f03f5258b54e9f436e2ed6d85449aa24c2c9972f91963d413e86311": "bitcoin-22.0-arm-linux-gnueabihf.tar.gz",[m
[32m+[m[32m    "2744d199c3343b2d94faffdfb2c94d75a630ba27301a70e47b0ad30a7e0155e9": "bitcoin-22.0-osx64.tar.gz",[m
[32m+[m[32m    "2cca5f99007d060aca9d8c7cbd035dfe2f040dd8200b210ce32cdf858479f70d": "bitcoin-22.0-powerpc64-linux-gnu.tar.gz",[m
[32m+[m[32m    "91b1e012975c5a363b5b5fcc81b5b7495e86ff703ec8262d4b9afcfec633c30d": "bitcoin-22.0-powerpc64le-linux-gnu.tar.gz",[m
[32m+[m[32m    "9cc3a62c469fe57e11485fdd32c916f10ce7a2899299855a2e479256ff49ff3c": "bitcoin-22.0-riscv64-linux-gnu.tar.gz",[m
[32m+[m[32m    "59ebd25dd82a51638b7a6bb914586201e67db67b919b2a1ff08925a7936d1b16": "bitcoin-22.0-x86_64-linux-gnu.tar.gz",[m
 }[m
 [m
 [m