[33mdiff --git a/src/Makefile.test.include b/src/Makefile.test.include[m
[33mindex d55f5e185..dc79ea312 100644[m
[33m--- a/src/Makefile.test.include[m
[33m+++ b/src/Makefile.test.include[m
[36m@@ -303,6 +303,7 @@[m [mtest_fuzz_fuzz_SOURCES = \[m
  test/fuzz/tx_out.cpp \[m
  test/fuzz/tx_pool.cpp \[m
  test/fuzz/txrequest.cpp \[m
[32m+[m[32m test/fuzz/utxo_snapshot.cpp \[m
  test/fuzz/validation_load_mempool.cpp \[m
  test/fuzz/versionbits.cpp[m
 endif # ENABLE_FUZZ_BINARY[m
[33mdiff --git a/src/chainparams.cpp b/src/chainparams.cpp[m
[33mindex fc5a9d84c..1b71c4db4 100644[m
[33m--- a/src/chainparams.cpp[m
[33m+++ b/src/chainparams.cpp[m
[36m@@ -454,8 +454,8 @@[m [mpublic:[m
                 {AssumeutxoHash{uint256S("0x1ebbf5850204c0bdb15bf030f47c7fe91d45c44c712697e4509ba67adb01c618")}, 110},[m
             },[m
             {[m
[31m-                210,[m
[31m-                {AssumeutxoHash{uint256S("0x9c5ed99ef98544b34f8920b6d1802f72ac28ae6e2bd2bd4c316ff10c230df3f2")}, 210},[m
[32m+[m[32m                200,[m
[32m+[m[32m                {AssumeutxoHash{uint256S("0x51c8d11d8b5c1de51543c579736e786aa2736206d1e11e627568029ce092cf62")}, 200},[m
             },[m
         };[m
 [m
[33mdiff --git a/src/test/fuzz/utxo_snapshot.cpp b/src/test/fuzz/utxo_snapshot.cpp[m
[33mnew file mode 100644[m
[33mindex 000000000..0b42282b3[m
[33m--- /dev/null[m
[33m+++ b/src/test/fuzz/utxo_snapshot.cpp[m
[36m@@ -0,0 +1,87 @@[m
[32m+[m[32m// Copyright (c) 2021 The Bitcoin Core developers[m
[32m+[m[32m// Distributed under the MIT software license, see the accompanying[m
[32m+[m[32m// file COPYING or http://www.opensource.org/licenses/mit-license.php.[m
[32m+[m
[32m+[m[32m#include <chainparams.h>[m
[32m+[m[32m#include <consensus/validation.h>[m
[32m+[m[32m#include <test/fuzz/FuzzedDataProvider.h>[m
[32m+[m[32m#include <test/fuzz/fuzz.h>[m
[32m+[m[32m#include <test/fuzz/util.h>[m
[32m+[m[32m#include <test/util/mining.h>[m
[32m+[m[32m#include <test/util/setup_common.h>[m
[32m+[m[32m#include <validation.h>[m
[32m+[m[32m#include <validationinterface.h>[m
[32m+[m
[32m+[m[32mnamespace {[m
[32m+[m
[32m+[m[32mconst std::vector<std::shared_ptr<CBlock>>* g_chain;[m
[32m+[m
[32m+[m[32mvoid initialize_chain()[m
[32m+[m[32m{[m
[32m+[m[32m    const auto params{CreateChainParams(ArgsManager{}, CBaseChainParams::REGTEST)};[m
[32m+[m[32m    static const auto chain{CreateBlockChain(2 * COINBASE_MATURITY, *params)};[m
[32m+[m[32m    g_chain = &chain;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mFUZZ_TARGET_INIT(utxo_snapshot, initialize_chain)[m
[32m+[m[32m{[m
[32m+[m[32m    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());[m
[32m+[m[32m    std::unique_ptr<const TestingSetup> setup{MakeNoLogFileContext<const TestingSetup>()};[m
[32m+[m[32m    const auto& node = setup->m_node;[m
[32m+[m[32m    auto& chainman{*node.chainman};[m
[32m+[m
[32m+[m[32m    const auto snapshot_path = GetDataDir() / "fuzzed_snapshot.dat";[m
[32m+[m
[32m+[m[32m    Assert(!chainman.SnapshotBlockhash());[m
[32m+[m
[32m+[m[32m    {[m
[32m+[m[32m        CAutoFile outfile{fsbridge::fopen(snapshot_path, "wb"), SER_DISK, CLIENT_VERSION};[m
[32m+[m[32m        const auto file_data{ConsumeRandomLengthByteVector(fuzzed_data_provider)};[m
[32m+[m[32m        outfile << Span<const uint8_t>{file_data};[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    const auto ActivateFuzzedSnapshot{[&] {[m
[32m+[m[32m        CAutoFile infile{fsbridge::fopen(snapshot_path, "rb"), SER_DISK, CLIENT_VERSION};[m
[32m+[m[32m        SnapshotMetadata metadata;[m
[32m+[m[32m        try {[m
[32m+[m[32m            infile >> metadata;[m
[32m+[m[32m        } catch (const std::ios_base::failure&) {[m
[32m+[m[32m            return false;[m
[32m+[m[32m        }[m
[32m+[m[32m        return chainman.ActivateSnapshot(infile, metadata, /* in_memory */ true);[m
[32m+[m[32m    }};[m
[32m+[m
[32m+[m[32m    if (fuzzed_data_provider.ConsumeBool()) {[m
[32m+[m[32m        for (const auto& block : *g_chain) {[m
[32m+[m[32m            BlockValidationState dummy;[m
[32m+[m[32m            bool processed{chainman.ProcessNewBlockHeaders({*block}, dummy, ::Params())};[m
[32m+[m[32m            Assert(processed);[m
[32m+[m[32m            const auto* index{WITH_LOCK(::cs_main, return chainman.m_blockman.LookupBlockIndex(block->GetHash()))};[m
[32m+[m[32m            Assert(index);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    if (ActivateFuzzedSnapshot()) {[m
[32m+[m[32m        LOCK(::cs_main);[m
[32m+[m[32m        Assert(!chainman.ActiveChainstate().m_from_snapshot_blockhash->IsNull());[m
[32m+[m[32m        Assert(*chainman.ActiveChainstate().m_from_snapshot_blockhash ==[m
[32m+[m[32m               *chainman.SnapshotBlockhash());[m
[32m+[m[32m        const auto& coinscache{chainman.ActiveChainstate().CoinsTip()};[m
[32m+[m[32m        int64_t chain_tx{};[m
[32m+[m[32m        for (const auto& block : *g_chain) {[m
[32m+[m[32m            Assert(coinscache.HaveCoin(COutPoint{block->vtx.at(0)->GetHash(), 0}));[m
[32m+[m[32m            const auto* index{chainman.m_blockman.LookupBlockIndex(block->GetHash())};[m
[32m+[m[32m            const auto num_tx{Assert(index)->nTx};[m
[32m+[m[32m            Assert(num_tx == 1);[m
[32m+[m[32m            chain_tx += num_tx;[m
[32m+[m[32m        }[m
[32m+[m[32m        Assert(g_chain->size() == coinscache.GetCacheSize());[m
[32m+[m[32m        Assert(chain_tx == chainman.ActiveTip()->nChainTx);[m
[32m+[m[32m    } else {[m
[32m+[m[32m        Assert(!chainman.SnapshotBlockhash());[m
[32m+[m[32m        Assert(!chainman.ActiveChainstate().m_from_snapshot_blockhash);[m
[32m+[m[32m    }[m
[32m+[m[32m    // Snapshot should refuse to load a second time regardless of validity[m
[32m+[m[32m    Assert(!ActivateFuzzedSnapshot());[m
[32m+[m[32m}[m
[32m+[m[32m} // namespace[m
[33mdiff --git a/src/test/util/mining.cpp b/src/test/util/mining.cpp[m
[33mindex 3fc3329da..120487382 100644[m
[33m--- a/src/test/util/mining.cpp[m
[33m+++ b/src/test/util/mining.cpp[m
[36m@@ -11,8 +11,10 @@[m
 #include <node/context.h>[m
 #include <pow.h>[m
 #include <script/standard.h>[m
[32m+[m[32m#include <test/util/script.h>[m
 #include <util/check.h>[m
 #include <validation.h>[m
[32m+[m[32m#include <versionbits.h>[m
 [m
 CTxIn generatetoaddress(const NodeContext& node, const std::string& address)[m
 {[m
[36m@@ -23,6 +25,37 @@[m [mCTxIn generatetoaddress(const NodeContext& node, const std::string& address)[m
     return MineBlock(node, coinbase_script);[m
 }[m
 [m
[32m+[m[32mstd::vector<std::shared_ptr<CBlock>> CreateBlockChain(size_t total_height, const CChainParams& params)[m
[32m+[m[32m{[m
[32m+[m[32m    std::vector<std::shared_ptr<CBlock>> ret{total_height};[m
[32m+[m[32m    auto time{params.GenesisBlock().nTime};[m
[32m+[m[32m    for (size_t height{0}; height < total_height; ++height) {[m
[32m+[m[32m        CBlock& block{*(ret.at(height) = std::make_shared<CBlock>())};[m
[32m+[m
[32m+[m[32m        CMutableTransaction coinbase_tx;[m
[32m+[m[32m        coinbase_tx.vin.resize(1);[m
[32m+[m[32m        coinbase_tx.vin[0].prevout.SetNull();[m
[32m+[m[32m        coinbase_tx.vout.resize(1);[m
[32m+[m[32m        coinbase_tx.vout[0].scriptPubKey = P2WSH_OP_TRUE;[m
[32m+[m[32m        coinbase_tx.vout[0].nValue = GetBlockSubsidy(height + 1, params.GetConsensus());[m
[32m+[m[32m        coinbase_tx.vin[0].scriptSig = CScript() << (height + 1) << OP_0;[m
[32m+[m[32m        block.vtx = {MakeTransactionRef(std::move(coinbase_tx))};[m
[32m+[m
[32m+[m[32m        block.nVersion = VERSIONBITS_LAST_OLD_BLOCK_VERSION;[m
[32m+[m[32m        block.hashPrevBlock = (height >= 1 ? *ret.at(height - 1) : params.GenesisBlock()).GetHash();[m
[32m+[m[32m        block.hashMerkleRoot = BlockMerkleRoot(block);[m
[32m+[m[32m        block.nTime = ++time;[m
[32m+[m[32m        block.nBits = params.GenesisBlock().nBits;[m
[32m+[m[32m        block.nNonce = 0;[m
[32m+[m
[32m+[m[32m        while (!CheckProofOfWork(block.GetHash(), block.nBits, params.GetConsensus())) {[m
[32m+[m[32m            ++block.nNonce;[m
[32m+[m[32m            assert(block.nNonce);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32m    return ret;[m
[32m+[m[32m}[m
[32m+[m
 CTxIn MineBlock(const NodeContext& node, const CScript& coinbase_scriptPubKey)[m
 {[m
     auto block = PrepareBlock(node, coinbase_scriptPubKey);[m
[33mdiff --git a/src/test/util/mining.h b/src/test/util/mining.h[m
[33mindex 5f250fffe..1fc1864b9 100644[m
[33m--- a/src/test/util/mining.h[m
[33m+++ b/src/test/util/mining.h[m
[36m@@ -7,12 +7,17 @@[m
 [m
 #include <memory>[m
 #include <string>[m
[32m+[m[32m#include <vector>[m
 [m
 class CBlock;[m
[32m+[m[32mclass CChainParams;[m
 class CScript;[m
 class CTxIn;[m
 struct NodeContext;[m
 [m
[32m+[m[32m/** Create a blockchain, starting from genesis */[m
[32m+[m[32mstd::vector<std::shared_ptr<CBlock>> CreateBlockChain(size_t total_height, const CChainParams& params);[m
[32m+[m
 /** Returns the generated coin */[m
 CTxIn MineBlock(const NodeContext&, const CScript& coinbase_scriptPubKey);[m
 [m
[33mdiff --git a/src/test/validation_tests.cpp b/src/test/validation_tests.cpp[m
[33mindex 1e5baec01..a0c2e76f0 100644[m
[33m--- a/src/test/validation_tests.cpp[m
[33m+++ b/src/test/validation_tests.cpp[m
[36m@@ -136,11 +136,11 @@[m [mBOOST_AUTO_TEST_CASE(test_assumeutxo)[m
 [m
     const auto out110 = *ExpectedAssumeutxo(110, *params);[m
     BOOST_CHECK_EQUAL(out110.hash_serialized.ToString(), "1ebbf5850204c0bdb15bf030f47c7fe91d45c44c712697e4509ba67adb01c618");[m
[31m-    BOOST_CHECK_EQUAL(out110.nChainTx, (unsigned int)110);[m
[32m+[m[32m    BOOST_CHECK_EQUAL(out110.nChainTx, 110U);[m
 [m
[31m-    const auto out210 = *ExpectedAssumeutxo(210, *params);[m
[31m-    BOOST_CHECK_EQUAL(out210.hash_serialized.ToString(), "9c5ed99ef98544b34f8920b6d1802f72ac28ae6e2bd2bd4c316ff10c230df3f2");[m
[31m-    BOOST_CHECK_EQUAL(out210.nChainTx, (unsigned int)210);[m
[32m+[m[32m    const auto out210 = *ExpectedAssumeutxo(200, *params);[m
[32m+[m[32m    BOOST_CHECK_EQUAL(out210.hash_serialized.ToString(), "51c8d11d8b5c1de51543c579736e786aa2736206d1e11e627568029ce092cf62");[m
[32m+[m[32m    BOOST_CHECK_EQUAL(out210.nChainTx, 200U);[m
 }[m
 [m
 BOOST_AUTO_TEST_SUITE_END()[m