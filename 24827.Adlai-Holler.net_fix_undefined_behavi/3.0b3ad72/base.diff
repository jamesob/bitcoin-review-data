[33mdiff --git a/src/net.cpp b/src/net.cpp[m
[33mindex 90fe237418..14da4dedae 100644[m
[33m--- a/src/net.cpp[m
[33m+++ b/src/net.cpp[m
[36m@@ -428,7 +428,7 @@[m [mstatic CAddress GetBindAddress(SOCKET sock)[m
     socklen_t sockaddr_bind_len = sizeof(sockaddr_bind);[m
     if (sock != INVALID_SOCKET) {[m
         if (!getsockname(sock, (struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {[m
[31m-            addr_bind.SetSockAddr((const struct sockaddr*)&sockaddr_bind);[m
[32m+[m[32m            addr_bind.SetSockAddr(sockaddr_bind);[m
         } else {[m
             LogPrint(BCLog::NET, "Warning: getsockname failed\n");[m
         }[m
[36m@@ -1139,7 +1139,7 @@[m [mvoid CConnman::AcceptConnection(const ListenSocket& hListenSocket) {[m
         return;[m
     }[m
 [m
[31m-    if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr)) {[m
[32m+[m[32m    if (!addr.SetSockAddr(sockaddr)) {[m
         LogPrintf("Warning: Unknown socket family\n");[m
     } else {[m
         addr = CAddress{MaybeFlipIPv6toCJDNS(addr), NODE_NONE};[m
[36m@@ -2389,7 +2389,7 @@[m [mbool CConnman::BindListenPort(const CService& addrBind, bilingual_str& strError,[m
     // Create socket for listening for incoming connections[m
     struct sockaddr_storage sockaddr;[m
     socklen_t len = sizeof(sockaddr);[m
[31m-    if (!addrBind.GetSockAddr((struct sockaddr*)&sockaddr, &len))[m
[32m+[m[32m    if (!addrBind.GetSockAddr(&sockaddr, &len))[m
     {[m
         strError = strprintf(Untranslated("Error: Bind address family for %s not supported"), addrBind.ToString());[m
         LogPrintf("%s\n", strError.original);[m
[36m@@ -2485,15 +2485,15 @@[m [mvoid Discover()[m
             if (strcmp(ifa->ifa_name, "lo0") == 0) continue;[m
             if (ifa->ifa_addr->sa_family == AF_INET)[m
             {[m
[31m-                struct sockaddr_in* s4 = (struct sockaddr_in*)(ifa->ifa_addr);[m
[31m-                CNetAddr addr(s4->sin_addr);[m
[32m+[m[32m                struct sockaddr_in s4 = LoadSockaddrIPv4(*ifa->ifa_addr);[m
[32m+[m[32m                CNetAddr addr(s4.sin_addr);[m
                 if (AddLocal(addr, LOCAL_IF))[m
                     LogPrintf("%s: IPv4 %s: %s\n", __func__, ifa->ifa_name, addr.ToString());[m
             }[m
             else if (ifa->ifa_addr->sa_family == AF_INET6)[m
             {[m
[31m-                struct sockaddr_in6* s6 = (struct sockaddr_in6*)(ifa->ifa_addr);[m
[31m-                CNetAddr addr(s6->sin6_addr);[m
[32m+[m[32m                struct sockaddr_in6 s6 = LoadSockaddrIPv6(*ifa->ifa_addr);[m
[32m+[m[32m                CNetAddr addr(s6.sin6_addr);[m
                 if (AddLocal(addr, LOCAL_IF))[m
                     LogPrintf("%s: IPv6 %s: %s\n", __func__, ifa->ifa_name, addr.ToString());[m
             }[m
[33mdiff --git a/src/netaddress.cpp b/src/netaddress.cpp[m
[33mindex 7bf11a3e48..b4bb1fc800 100644[m
[33m--- a/src/netaddress.cpp[m
[33m+++ b/src/netaddress.cpp[m
[36m@@ -837,14 +837,14 @@[m [mCService::CService(const struct sockaddr_in6 &addr) : CNetAddr(addr.sin6_addr, a[m
    assert(addr.sin6_family == AF_INET6);[m
 }[m
 [m
[31m-bool CService::SetSockAddr(const struct sockaddr *paddr)[m
[32m+[m[32mbool CService::SetSockAddr(const struct sockaddr_storage &addrIn)[m
 {[m
[31m-    switch (paddr->sa_family) {[m
[32m+[m[32m    switch (addrIn.ss_family) {[m
     case AF_INET:[m
[31m-        *this = CService(*(const struct sockaddr_in*)paddr);[m
[32m+[m[32m        *this = CService(LoadSockaddrIPv4(addrIn));[m
         return true;[m
     case AF_INET6:[m
[31m-        *this = CService(*(const struct sockaddr_in6*)paddr);[m
[32m+[m[32m        *this = CService(LoadSockaddrIPv6(addrIn));[m
         return true;[m
     default:[m
         return false;[m
[36m@@ -878,31 +878,25 @@[m [mbool operator<(const CService& a, const CService& b)[m
  *[m
  * @returns Whether or not the operation was successful.[m
  */[m
[31m-bool CService::GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const[m
[32m+[m[32mbool CService::GetSockAddr(struct sockaddr_storage* paddr, socklen_t *addrlen) const[m
 {[m
     if (IsIPv4()) {[m
[31m-        if (*addrlen < (socklen_t)sizeof(struct sockaddr_in))[m
[32m+[m[32m        struct sockaddr_in addrin;[m
[32m+[m[32m        if (!GetInAddr(&addrin.sin_addr))[m
             return false;[m
[31m-        *addrlen = sizeof(struct sockaddr_in);[m
[31m-        struct sockaddr_in *paddrin = (struct sockaddr_in*)paddr;[m
[31m-        memset(paddrin, 0, *addrlen);[m
[31m-        if (!GetInAddr(&paddrin->sin_addr))[m
[31m-            return false;[m
[31m-        paddrin->sin_family = AF_INET;[m
[31m-        paddrin->sin_port = htons(port);[m
[32m+[m[32m        addrin.sin_family = AF_INET;[m
[32m+[m[32m        addrin.sin_port = htons(port);[m
[32m+[m[32m        StoreSockaddrIPv4(addrin, paddr, addrlen);[m
         return true;[m
     }[m
     if (IsIPv6() || IsCJDNS()) {[m
[31m-        if (*addrlen < (socklen_t)sizeof(struct sockaddr_in6))[m
[31m-            return false;[m
[31m-        *addrlen = sizeof(struct sockaddr_in6);[m
[31m-        struct sockaddr_in6 *paddrin6 = (struct sockaddr_in6*)paddr;[m
[31m-        memset(paddrin6, 0, *addrlen);[m
[31m-        if (!GetIn6Addr(&paddrin6->sin6_addr))[m
[32m+[m[32m        struct sockaddr_in6 addrin6;[m
[32m+[m[32m        if (!GetIn6Addr(&addrin6.sin6_addr))[m
             return false;[m
[31m-        paddrin6->sin6_scope_id = m_scope_id;[m
[31m-        paddrin6->sin6_family = AF_INET6;[m
[31m-        paddrin6->sin6_port = htons(port);[m
[32m+[m[32m        addrin6.sin6_scope_id = m_scope_id;[m
[32m+[m[32m        addrin6.sin6_family = AF_INET6;[m
[32m+[m[32m        addrin6.sin6_port = htons(port);[m
[32m+[m[32m        StoreSockaddrIPv6(addrin6, paddr, addrlen);[m
         return true;[m
     }[m
     return false;[m
[36m@@ -1141,3 +1135,35 @@[m [mbool operator<(const CSubNet& a, const CSubNet& b)[m
 {[m
     return (a.network < b.network || (a.network == b.network && memcmp(a.netmask, b.netmask, 16) < 0));[m
 }[m
[32m+[m
[32m+[m[32mtemplate <typename T>[m
[32m+[m[32mstatic sockaddr_in LoadSockaddrIPv4Internal(const T& src) {[m
[32m+[m[32m    sockaddr_in s4;[m
[32m+[m[32m    std::memcpy(&s4, &src, sizeof(s4));[m
[32m+[m[32m    return s4;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32msockaddr_in LoadSockaddrIPv4(const sockaddr& src) {[m
[32m+[m[32m    assert(src.sa_family == AF_INET);[m
[32m+[m[32m    return LoadSockaddrIPv4Internal(src);[m
[32m+[m[32m}[m
[32m+[m[32msockaddr_in LoadSockaddrIPv4(const sockaddr_storage& src) {[m
[32m+[m[32m    assert(src.ss_family == AF_INET);[m
[32m+[m[32m    return LoadSockaddrIPv4Internal(src);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtemplate <typename T>[m
[32m+[m[32mstatic sockaddr_in6 LoadSockaddrIPv6Internal(const T& src) {[m
[32m+[m[32m    sockaddr_in6 s6;[m
[32m+[m[32m    std::memcpy(&s6, &src, sizeof(s6));[m
[32m+[m[32m    return s6;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32msockaddr_in6 LoadSockaddrIPv6(const sockaddr& src) {[m
[32m+[m[32m    assert(src.sa_family == AF_INET6);[m
[32m+[m[32m    return LoadSockaddrIPv6Internal(src);[m
[32m+[m[32m}[m
[32m+[m[32msockaddr_in6 LoadSockaddrIPv6(const sockaddr_storage& src) {[m
[32m+[m[32m    assert(src.ss_family == AF_INET6);[m
[32m+[m[32m    return LoadSockaddrIPv6Internal(src);[m
[32m+[m[32m}[m
[33mdiff --git a/src/netaddress.h b/src/netaddress.h[m
[33mindex b9a8dc589a..ad45bdee58 100644[m
[33m--- a/src/netaddress.h[m
[33m+++ b/src/netaddress.h[m
[36m@@ -529,8 +529,8 @@[m [mpublic:[m
     CService(const struct in_addr& ipv4Addr, uint16_t port);[m
     explicit CService(const struct sockaddr_in& addr);[m
     uint16_t GetPort() const;[m
[31m-    bool GetSockAddr(struct sockaddr* paddr, socklen_t* addrlen) const;[m
[31m-    bool SetSockAddr(const struct sockaddr* paddr);[m
[32m+[m[32m    bool GetSockAddr(struct sockaddr_storage* paddr, socklen_t* addrlen) const;[m
[32m+[m[32m    bool SetSockAddr(const struct sockaddr_storage& addr);[m
     friend bool operator==(const CService& a, const CService& b);[m
     friend bool operator!=(const CService& a, const CService& b) { return !(a == b); }[m
     friend bool operator<(const CService& a, const CService& b);[m
[36m@@ -577,4 +577,33 @@[m [mprivate:[m
     const uint64_t m_salt_k1;[m
 };[m
 [m
[32m+[m[32m/**[m
[32m+[m[32m * Read the generic sockaddr struct `src` safely. Use these[m
[32m+[m[32m * instead of casting `src` and accessing its fields.[m
[32m+[m[32m */[m
[32m+[m[32msockaddr_in LoadSockaddrIPv4(const sockaddr& src);[m
[32m+[m[32msockaddr_in LoadSockaddrIPv4(const sockaddr_storage& src);[m
[32m+[m[32msockaddr_in6 LoadSockaddrIPv6(const sockaddr& src);[m
[32m+[m[32msockaddr_in6 LoadSockaddrIPv6(const sockaddr_storage& src);[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * Overwrite the provided generic sockaddr struct `ptr` safely. Use these[m
[32m+[m[32m * instead of casting `ptr` and dereferencing it.[m
[32m+[m[32m */[m
[32m+[m[32mtemplate <typename T>[m
[32m+[m[32mvoid StoreSockaddrIPv4(const sockaddr_in& src, T* ptr, socklen_t *addrlen) {[m
[32m+[m[32m    constexpr size_t sz4 = sizeof(sockaddr_in);[m
[32m+[m[32m    assert(*addrlen >= sz4);[m
[32m+[m[32m    *addrlen = sz4;[m
[32m+[m[32m    std::memcpy(ptr, &src, sz4);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtemplate <typename T>[m
[32m+[m[32mvoid StoreSockaddrIPv6(const sockaddr_in6& src, T* ptr, socklen_t *addrlen) {[m
[32m+[m[32m    constexpr size_t sz6 = sizeof(sockaddr_in6);[m
[32m+[m[32m    assert(*addrlen >= sz6);[m
[32m+[m[32m    *addrlen = sz6;[m
[32m+[m[32m    std::memcpy(ptr, &src, sz6);[m
[32m+[m[32m}[m
[32m+[m
 #endif // BITCOIN_NETADDRESS_H[m
[33mdiff --git a/src/netbase.cpp b/src/netbase.cpp[m
[33mindex 8ff3b7a68c..33e3c8bec6 100644[m
[33m--- a/src/netbase.cpp[m
[33m+++ b/src/netbase.cpp[m
[36m@@ -68,12 +68,13 @@[m [mstd::vector<CNetAddr> WrappedGetAddrInfo(const std::string& name, bool allow_loo[m
     while (ai_trav != nullptr) {[m
         if (ai_trav->ai_family == AF_INET) {[m
             assert(ai_trav->ai_addrlen >= sizeof(sockaddr_in));[m
[31m-            resolved_addresses.emplace_back(reinterpret_cast<sockaddr_in*>(ai_trav->ai_addr)->sin_addr);[m
[32m+[m[32m            struct sockaddr_in s4 = LoadSockaddrIPv4(*ai_trav->ai_addr);[m
[32m+[m[32m            resolved_addresses.emplace_back(s4.sin_addr);[m
         }[m
         if (ai_trav->ai_family == AF_INET6) {[m
             assert(ai_trav->ai_addrlen >= sizeof(sockaddr_in6));[m
[31m-            const sockaddr_in6* s6{reinterpret_cast<sockaddr_in6*>(ai_trav->ai_addr)};[m
[31m-            resolved_addresses.emplace_back(s6->sin6_addr, s6->sin6_scope_id);[m
[32m+[m[32m            struct sockaddr_in6 s6 = LoadSockaddrIPv6(*ai_trav->ai_addr);[m
[32m+[m[32m            resolved_addresses.emplace_back(s6.sin6_addr, s6.sin6_scope_id);[m
         }[m
         ai_trav = ai_trav->ai_next;[m
     }[m
[36m@@ -488,7 +489,7 @@[m [mstd::unique_ptr<Sock> CreateSockTCP(const CService& address_family)[m
     // Create a sockaddr from the specified service.[m
     struct sockaddr_storage sockaddr;[m
     socklen_t len = sizeof(sockaddr);[m
[31m-    if (!address_family.GetSockAddr((struct sockaddr*)&sockaddr, &len)) {[m
[32m+[m[32m    if (!address_family.GetSockAddr(&sockaddr, &len)) {[m
         LogPrintf("Cannot create socket for %s: unsupported network\n", address_family.ToString());[m
         return nullptr;[m
     }[m
[36m@@ -553,7 +554,7 @@[m [mbool ConnectSocketDirectly(const CService &addrConnect, const Sock& sock, int nT[m
         LogPrintf("Cannot connect to %s: invalid socket\n", addrConnect.ToString());[m
         return false;[m
     }[m
[31m-    if (!addrConnect.GetSockAddr((struct sockaddr*)&sockaddr, &len)) {[m
[32m+[m[32m    if (!addrConnect.GetSockAddr(&sockaddr, &len)) {[m
         LogPrintf("Cannot connect to %s: unsupported network\n", addrConnect.ToString());[m
         return false;[m
     }[m
[33mdiff --git a/src/test/util/net.h b/src/test/util/net.h[m
[33mindex e980fe4967..a9b3afe9b6 100644[m
[33m--- a/src/test/util/net.h[m
[33m+++ b/src/test/util/net.h[m
[36m@@ -135,10 +135,12 @@[m [mpublic:[m
             const socklen_t write_len = static_cast<socklen_t>(sizeof(sockaddr_in));[m
             if (*addr_len >= write_len) {[m
                 *addr_len = write_len;[m
[31m-                sockaddr_in* addr_in = reinterpret_cast<sockaddr_in*>(addr);[m
[31m-                addr_in->sin_family = AF_INET;[m
[31m-                memset(&addr_in->sin_addr, 0x05, sizeof(addr_in->sin_addr));[m
[31m-                addr_in->sin_port = htons(6789);[m
[32m+[m[32m                sockaddr_in addr_in;[m
[32m+[m[32m                memset(&addr_in, 0, sizeof(addr_in));[m
[32m+[m[32m                addr_in.sin_family = AF_INET;[m
[32m+[m[32m                memset(&addr_in.sin_addr, 0x05, sizeof(addr_in.sin_addr));[m
[32m+[m[32m                addr_in.sin_port = htons(6789);[m
[32m+[m[32m                StoreSockaddrIPv4(addr_in, addr, addr_len);[m
             }[m
         }[m
         return std::make_unique<StaticContentsSock>("");[m
[33mdiff --git a/src/torcontrol.cpp b/src/torcontrol.cpp[m
[33mindex e2a7cb4066..6ac822a690 100644[m
[33m--- a/src/torcontrol.cpp[m
[33m+++ b/src/torcontrol.cpp[m
[36m@@ -142,7 +142,7 @@[m [mbool TorControlConnection::Connect(const std::string& tor_control_center, const[m
 [m
     struct sockaddr_storage control_address;[m
     socklen_t control_address_len = sizeof(control_address);[m
[31m-    if (!control_service.GetSockAddr(reinterpret_cast<struct sockaddr*>(&control_address), &control_address_len)) {[m
[32m+[m[32m    if (!control_service.GetSockAddr(&control_address, &control_address_len)) {[m
         LogPrintf("tor: Error parsing socket address %s\n", tor_control_center);[m
         return false;[m
     }[m