[33mdiff --git a/ci/test/01_base_install.sh b/ci/test/01_base_install.sh[m
[33mnew file mode 100755[m
[33mindex 0000000000..c2469d7ca9[m
[33m--- /dev/null[m
[33m+++ b/ci/test/01_base_install.sh[m
[36m@@ -0,0 +1,33 @@[m
[32m+[m[32m#!/usr/bin/env bash[m
[32m+[m[32m#[m
[32m+[m[32m# Copyright (c) 2018-2022 The Bitcoin Core developers[m
[32m+[m[32m# Distributed under the MIT software license, see the accompanying[m
[32m+[m[32m# file COPYING or http://www.opensource.org/licenses/mit-license.php.[m
[32m+[m
[32m+[m[32mexport LC_ALL=C.UTF-8[m
[32m+[m
[32m+[m[32mCI_EXEC_ROOT () { bash -c "$*"; }[m
[32m+[m[32mexport -f CI_EXEC_ROOT[m
[32m+[m
[2m+[m[2mif [ -n "$DPKG_ADD_ARCH" ]; then[m
[2m+[m[2m  CI_EXEC_ROOT dpkg --add-architecture "$DPKG_ADD_ARCH"[m
[2m+[m[2mfi[m
[2m+[m
[2m+[m[2mif [[ $CI_IMAGE_NAME_TAG == *centos* ]]; then[m
[2m+[m[2m  ${CI_RETRY_EXE} CI_EXEC_ROOT dnf -y install epel-release[m
[2m+[m[2m  ${CI_RETRY_EXE} CI_EXEC_ROOT dnf -y --allowerasing install "$CI_BASE_PACKAGES" "$PACKAGES"[m
[2m+[m[2melif [ "$CI_USE_APT_INSTALL" != "no" ]; then[m
[2m+[m[2m  if [[ "${ADD_UNTRUSTED_BPFCC_PPA}" == "true" ]]; then[m
[2m+[m[2m    # Ubuntu 22.04 LTS and Debian 11 both have an outdated bpfcc-tools packages.[m
[2m+[m[2m    # The iovisor PPA is outdated as well. The next Ubuntu and Debian releases will contain updated[m
[2m+[m[2m    # packages. Meanwhile, use an untrusted PPA to install an up-to-date version of the bpfcc-tools[m
[2m+[m[2m    # package.[m
[2m+[m[2m    # TODO: drop this once we can use newer images in GCE[m
[2m+[m[2m    CI_EXEC_ROOT add-apt-repository ppa:hadret/bpfcc[m
[2m+[m[2m  fi[m
[2m+[m[2m  if [[ -n "${APPEND_APT_SOURCES_LIST}" ]]; then[m
[2m+[m[2m    CI_EXEC_ROOT echo "${APPEND_APT_SOURCES_LIST}" \>\> /etc/apt/sources.list[m
[2m+[m[2m  fi[m
[2m+[m[2m  ${CI_RETRY_EXE} CI_EXEC_ROOT apt-get update[m
[2m+[m[2m  ${CI_RETRY_EXE} CI_EXEC_ROOT apt-get install --no-install-recommends --no-upgrade -y "$PACKAGES" "$CI_BASE_PACKAGES"[m
[2m+[m[2mfi[m
[33mdiff --git a/ci/test/04_install.sh b/ci/test/04_install.sh[m
[33mindex 53fe6d961f..05bef79a3d 100755[m
[33m--- a/ci/test/04_install.sh[m
[33m+++ b/ci/test/04_install.sh[m
[36m@@ -33,7 +33,12 @@[m [mif [ -z "$DANGER_RUN_CI_ON_HOST" ]; then[m
 [m
   # the name isn't important, so long as we use the same UID[m
   LOCAL_USER=nonroot[m
[31m-  ${CI_RETRY_EXE} docker pull "$CI_IMAGE_NAME_TAG"[m
[32m+[m[32m  DOCKER_BUILDKIT=1 ${CI_RETRY_EXE} docker build \[m
[32m+[m[32m      --file "${BASE_ROOT_DIR}/ci/test_imagefile" \[m
[32m+[m[32m      --build-arg "CI_IMAGE_NAME_TAG=${CI_IMAGE_NAME_TAG}" \[m
[32m+[m[32m      --build-arg "FILE_ENV=${FILE_ENV}" \[m
[32m+[m[32m      --tag="${CONTAINER_NAME}" \[m
[32m+[m[32m      "${BASE_ROOT_DIR}"[m
 [m
   if [ -n "${RESTART_CI_DOCKER_BEFORE_RUN}" ] ; then[m
     echo "Restart docker before run to stop and clear all containers started with --rm"[m
[36m@@ -49,7 +54,7 @@[m [mif [ -z "$DANGER_RUN_CI_ON_HOST" ]; then[m
                   -w $BASE_ROOT_DIR \[m
                   --env-file /tmp/env \[m
                   --name $CONTAINER_NAME \[m
[31m-                  $CI_IMAGE_NAME_TAG)[m
[32m+[m[32m                  $CONTAINER_NAME)[m
   export CI_CONTAINER_ID[m
 [m
   # Create a non-root user inside the container which matches the local user.[m
[36m@@ -63,6 +68,7 @@[m [mif [ -z "$DANGER_RUN_CI_ON_HOST" ]; then[m
   export CI_EXEC_CMD_PREFIX="docker exec -u $LOCAL_UID $CI_CONTAINER_ID"[m
 else[m
   echo "Running on host system without docker wrapper"[m
[32m+[m[32m  "${BASE_ROOT_DIR}/ci/test/01_base_install.sh"[m
 fi[m
 [m
 CI_EXEC () {[m
[36m@@ -76,29 +82,6 @@[m [mexport -f CI_EXEC_ROOT[m
 [m
 CI_EXEC mkdir -p "${BINS_SCRATCH_DIR}"[m
 [m
[2m-if [ -n "$DPKG_ADD_ARCH" ]; then[m
[2m-  CI_EXEC_ROOT dpkg --add-architecture "$DPKG_ADD_ARCH"[m
[2m-fi[m
[2m-[m
[2m-if [[ $CI_IMAGE_NAME_TAG == *centos* ]]; then[m
[2m-  ${CI_RETRY_EXE} CI_EXEC_ROOT dnf -y install epel-release[m
[2m-  ${CI_RETRY_EXE} CI_EXEC_ROOT dnf -y --allowerasing install "$CI_BASE_PACKAGES" "$PACKAGES"[m
[2m-elif [ "$CI_USE_APT_INSTALL" != "no" ]; then[m
[2m-  if [[ "${ADD_UNTRUSTED_BPFCC_PPA}" == "true" ]]; then[m
[2m-    # Ubuntu 22.04 LTS and Debian 11 both have an outdated bpfcc-tools packages.[m
[2m-    # The iovisor PPA is outdated as well. The next Ubuntu and Debian releases will contain updated[m
[2m-    # packages. Meanwhile, use an untrusted PPA to install an up-to-date version of the bpfcc-tools[m
[2m-    # package.[m
[2m-    # TODO: drop this once we can use newer images in GCE[m
[2m-    CI_EXEC_ROOT add-apt-repository ppa:hadret/bpfcc[m
[2m-  fi[m
[2m-  if [[ -n "${APPEND_APT_SOURCES_LIST}" ]]; then[m
[2m-    CI_EXEC_ROOT echo "${APPEND_APT_SOURCES_LIST}" \>\> /etc/apt/sources.list[m
[2m-  fi[m
[2m-  ${CI_RETRY_EXE} CI_EXEC_ROOT apt-get update[m
[2m-  ${CI_RETRY_EXE} CI_EXEC_ROOT apt-get install --no-install-recommends --no-upgrade -y "$PACKAGES" "$CI_BASE_PACKAGES"[m
[2m-fi[m
[31m-[m
 if [ -n "$PIP_PACKAGES" ]; then[m
   if [ "$CI_OS_NAME" == "macos" ]; then[m
     sudo -H pip3 install --upgrade pip[m
[33mdiff --git a/ci/test_imagefile b/ci/test_imagefile[m
[33mnew file mode 100644[m
[33mindex 0000000000..4854708d1a[m
[33m--- /dev/null[m
[33m+++ b/ci/test_imagefile[m
[36m@@ -0,0 +1,10 @@[m
[32m+[m[32mARG CI_IMAGE_NAME_TAG[m
[32m+[m[32mFROM ${CI_IMAGE_NAME_TAG}[m
[32m+[m
[32m+[m[32mARG FILE_ENV[m
[32m+[m[32mENV FILE_ENV=${FILE_ENV}[m
[32m+[m
[32m+[m[32mCOPY ./ci/retry/retry /usr/bin/retry[m
[32m+[m[32mCOPY ./ci/test/00_setup_env.sh ./${FILE_ENV} ./ci/test/01_base_install.sh /ci_base_install/ci/test/[m
[32m+[m
[32m+[m[32mRUN ["bash", "-c", "cd /ci_base_install/ && set -o errexit && source ./ci/test/00_setup_env.sh && ./ci/test/01_base_install.sh"][m