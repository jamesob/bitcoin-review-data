[33mdiff --git a/contrib/seeds/generate-seeds.py b/contrib/seeds/generate-seeds.py[m
[33mindex dbecba7d1d..44345e3987 100755[m
[33m--- a/contrib/seeds/generate-seeds.py[m
[33m+++ b/contrib/seeds/generate-seeds.py[m
[36m@@ -61,7 +61,7 @@[m [mdef name_to_bip155(addr):[m
             raise ValueError(f'Invalid I2P {vchAddr}')[m
     elif '.' in addr: # IPv4[m
         return (BIP155Network.IPV4, bytes((int(x) for x in addr.split('.'))))[m
[31m-    elif ':' in addr: # IPv6[m
[32m+[m[32m    elif ':' in addr: # IPv6 or CJDNS[m
         sub = [[], []] # prefix, suffix[m
         x = 0[m
         addr = addr.split(':')[m
[36m@@ -77,7 +77,14 @@[m [mdef name_to_bip155(addr):[m
                 sub[x].append(val & 0xff)[m
         nullbytes = 16 - len(sub[0]) - len(sub[1])[m
         assert((x == 0 and nullbytes == 0) or (x == 1 and nullbytes > 0))[m
[31m-        return (BIP155Network.IPV6, bytes(sub[0] + ([0] * nullbytes) + sub[1]))[m
[32m+[m[32m        addr_bytes = bytes(sub[0] + ([0] * nullbytes) + sub[1])[m
[32m+[m[32m        if addr_bytes[0] == 0xfc:[m
[32m+[m[32m            # Assume that seeds with fc00::/8 addresses belong to CJDNS,[m
[32m+[m[32m            # not to the publicly unroutable "Unique Local Unicast" network, see[m
[32m+[m[32m            # RFC4193: https://datatracker.ietf.org/doc/html/rfc4193#section-8[m
[32m+[m[32m            return (BIP155Network.CJDNS, addr_bytes)[m
[32m+[m[32m        else:[m
[32m+[m[32m            return (BIP155Network.IPV6, addr_bytes)[m
     else:[m
         raise ValueError('Could not parse address %s' % addr)[m
 [m
[33mdiff --git a/src/init.cpp b/src/init.cpp[m
[33mindex 4495ded64d..8f24fe9099 100644[m
[33m--- a/src/init.cpp[m
[33m+++ b/src/init.cpp[m
[36m@@ -422,6 +422,7 @@[m [mvoid SetupServerArgs(ArgsManager& argsman)[m
     argsman.AddArg("-asmap=<file>", strprintf("Specify asn mapping used for bucketing of the peers (default: %s). Relative paths will be prefixed by the net-specific datadir location.", DEFAULT_ASMAP_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);[m
     argsman.AddArg("-bantime=<n>", strprintf("Default duration (in seconds) of manually configured bans (default: %u)", DEFAULT_MISBEHAVING_BANTIME), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);[m
     argsman.AddArg("-bind=<addr>[:<port>][=onion]", strprintf("Bind to given address and always listen on it (default: 0.0.0.0). Use [host]:port notation for IPv6. Append =onion to tag any incoming connections to that address and port as incoming Tor connections (default: 127.0.0.1:%u=onion, testnet: 127.0.0.1:%u=onion, signet: 127.0.0.1:%u=onion, regtest: 127.0.0.1:%u=onion)", defaultBaseParams->OnionServiceTargetPort(), testnetBaseParams->OnionServiceTargetPort(), signetBaseParams->OnionServiceTargetPort(), regtestBaseParams->OnionServiceTargetPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);[m
[32m+[m[32m    argsman.AddArg("-cjdnsreachable", "If set then this host is configured for CJDNS (connecting to fc00::/8 addresses would lead us to the CJDNS network) (default: 0)", ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);[m
     argsman.AddArg("-connect=<ip>", "Connect only to the specified node; -noconnect disables automatic connections (the rules for this peer are the same as for -addnode). This option can be specified multiple times to connect to multiple nodes.", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);[m
     argsman.AddArg("-discover", "Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);[m
     argsman.AddArg("-dns", strprintf("Allow DNS lookups for -addnode, -seednode and -connect (default: %u)", DEFAULT_NAME_LOOKUP), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);[m
[36m@@ -1294,6 +1295,14 @@[m [mbool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)[m
         }[m
     }[m
 [m
[32m+[m[32m    if (!args.IsArgSet("-cjdnsreachable")) {[m
[32m+[m[32m        SetReachable(NET_CJDNS, false);[m
[32m+[m[32m    }[m
[32m+[m[32m    // Now IsReachable(NET_CJDNS) is true if:[m
[32m+[m[32m    // 1. -cjdnsreachable is given and[m
[32m+[m[32m    // 2.1. -onlynet is not given or[m
[32m+[m[32m    // 2.2. -onlynet=cjdns is given[m
[32m+[m
     // Check for host lookup allowed before parsing any network related parameters[m
     fNameLookup = args.GetBoolArg("-dns", DEFAULT_NAME_LOOKUP);[m
 [m
[36m@@ -1315,6 +1324,7 @@[m [mbool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)[m
         SetProxy(NET_IPV4, addrProxy);[m
         SetProxy(NET_IPV6, addrProxy);[m
         SetProxy(NET_ONION, addrProxy);[m
[32m+[m[32m        SetProxy(NET_CJDNS, addrProxy);[m
         SetNameProxy(addrProxy);[m
         SetReachable(NET_ONION, true); // by default, -proxy sets onion as reachable, unless -noonion later[m
     }[m
[33mdiff --git a/src/net.cpp b/src/net.cpp[m
[33mindex 7271ff22b2..abcf7e2765 100644[m
[33m--- a/src/net.cpp[m
[33m+++ b/src/net.cpp[m
[36m@@ -230,9 +230,27 @@[m [mstd::optional<CAddress> GetLocalAddrForPeer(CNode *pnode)[m
     return std::nullopt;[m
 }[m
 [m
[32m+[m[32m/**[m
[32m+[m[32m * If an IPv6 address belongs to the address range used by the CJDNS network and[m
[32m+[m[32m * the CJDNS network is reachable (-cjdnsreachable config is set), then change[m
[32m+[m[32m * the type from NET_IPV6 to NET_CJDNS.[m
[32m+[m[32m * @param[in] service Address to potentially convert.[m
[32m+[m[32m * @return a copy of `service` either unmodified or changed to CJDNS.[m
[32m+[m[32m */[m
[32m+[m[32mCService MaybeFlipIPv6toCJDNS(const CService& service)[m
[32m+[m[32m{[m
[32m+[m[32m    CService ret{service};[m
[32m+[m[32m    if (ret.m_net == NET_IPV6 && ret.m_addr[0] == 0xfc && IsReachable(NET_CJDNS)) {[m
[32m+[m[32m        ret.m_net = NET_CJDNS;[m
[32m+[m[32m    }[m
[32m+[m[32m    return ret;[m
[32m+[m[32m}[m
[32m+[m
 // learn a new local address[m
[31m-bool AddLocal(const CService& addr, int nScore)[m
[32m+[m[32mbool AddLocal(const CService& addr_, int nScore)[m
 {[m
[32m+[m[32m    CService addr{MaybeFlipIPv6toCJDNS(addr_)};[m
[32m+[m
     if (!addr.IsRoutable())[m
         return false;[m
 [m
[36m@@ -409,7 +427,8 @@[m [mCNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo[m
     if (pszDest) {[m
         std::vector<CService> resolved;[m
         if (Lookup(pszDest, resolved,  default_port, fNameLookup && !HaveNameProxy(), 256) && !resolved.empty()) {[m
[31m-            addrConnect = CAddress(resolved[GetRand(resolved.size())], NODE_NONE);[m
[32m+[m[32m            const CService rnd{resolved[GetRand(resolved.size())]};[m
[32m+[m[32m            addrConnect = CAddress{MaybeFlipIPv6toCJDNS(rnd), NODE_NONE};[m
             if (!addrConnect.IsValid()) {[m
                 LogPrint(BCLog::NET, "Resolver returned invalid address %s for %s\n", addrConnect.ToString(), pszDest);[m
                 return nullptr;[m
[36m@@ -1091,9 +1110,11 @@[m [mvoid CConnman::AcceptConnection(const ListenSocket& hListenSocket) {[m
 [m
     if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr)) {[m
         LogPrintf("Warning: Unknown socket family\n");[m
[32m+[m[32m    } else {[m
[32m+[m[32m        addr = CAddress{MaybeFlipIPv6toCJDNS(addr), NODE_NONE};[m
     }[m
 [m
[31m-    const CAddress addr_bind = GetBindAddress(hSocket);[m
[32m+[m[32m    const CAddress addr_bind{MaybeFlipIPv6toCJDNS(GetBindAddress(hSocket)), NODE_NONE};[m
 [m
     NetPermissionFlags permissionFlags = NetPermissionFlags::None;[m
     hListenSocket.AddSocketPermissionFlags(permissionFlags);[m
[36m@@ -2460,7 +2481,10 @@[m [mNodeId CConnman::GetNewNodeId()[m
 }[m
 [m
 [m
[31m-bool CConnman::Bind(const CService &addr, unsigned int flags, NetPermissionFlags permissions) {[m
[32m+[m[32mbool CConnman::Bind(const CService& addr_, unsigned int flags, NetPermissionFlags permissions)[m
[32m+[m[32m{[m
[32m+[m[32m    const CService addr{MaybeFlipIPv6toCJDNS(addr_)};[m
[32m+[m
     if (!(flags & BF_EXPLICIT) && !IsReachable(addr)) {[m
         return false;[m
     }[m
[33mdiff --git a/src/netaddress.cpp b/src/netaddress.cpp[m
[33mindex f9fff5a6d5..7f1dd698b0 100644[m
[33m--- a/src/netaddress.cpp[m
[33m+++ b/src/netaddress.cpp[m
[36m@@ -663,7 +663,7 @@[m [mbool CNetAddr::GetInAddr(struct in_addr* pipv4Addr) const[m
 }[m
 [m
 /**[m
[31m- * Try to get our IPv6 address.[m
[32m+[m[32m * Try to get our IPv6 (or CJDNS) address.[m
  *[m
  * @param[out] pipv6Addr The in6_addr struct to which to copy.[m
  *[m
[36m@@ -674,7 +674,7 @@[m [mbool CNetAddr::GetInAddr(struct in_addr* pipv4Addr) const[m
  */[m
 bool CNetAddr::GetIn6Addr(struct in6_addr* pipv6Addr) const[m
 {[m
[31m-    if (!IsIPv6()) {[m
[32m+[m[32m    if (!IsIPv6() && !IsCJDNS()) {[m
         return false;[m
     }[m
     assert(sizeof(*pipv6Addr) == m_addr.size());[m
[36m@@ -794,8 +794,14 @@[m [mstd::vector<unsigned char> CNetAddr::GetGroup(const std::vector<bool> &asmap) co[m
         vchRet.push_back((ipv4 >> 24) & 0xFF);[m
         vchRet.push_back((ipv4 >> 16) & 0xFF);[m
         return vchRet;[m
[31m-    } else if (IsTor() || IsI2P() || IsCJDNS()) {[m
[32m+[m[32m    } else if (IsTor() || IsI2P()) {[m
         nBits = 4;[m
[32m+[m[32m    } else if (IsCJDNS()) {[m
[32m+[m[32m        // Treat in the same way as Tor and I2P because the address in all of[m
[32m+[m[32m        // them is "random" bytes (derived from a public key). However in CJDNS[m
[32m+[m[32m        // the first byte is a constant 0xfc, so the random bytes come after it.[m
[32m+[m[32m        // Thus skip the constant 8 bits at the start.[m
[32m+[m[32m        nBits = 12;[m
     } else if (IsHeNet()) {[m
         // for he.net, use /36 groups[m
         nBits = 36;[m
[36m@@ -892,6 +898,11 @@[m [mint CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const[m
         case NET_I2P: return REACH_PRIVATE;[m
         default: return REACH_DEFAULT;[m
         }[m
[32m+[m[32m    case NET_CJDNS:[m
[32m+[m[32m        switch (ourNet) {[m
[32m+[m[32m        case NET_CJDNS: return REACH_PRIVATE;[m
[32m+[m[32m        default: return REACH_DEFAULT;[m
[32m+[m[32m        }[m
     case NET_TEREDO:[m
         switch(ourNet) {[m
         default:          return REACH_DEFAULT;[m
[36m@@ -993,7 +1004,7 @@[m [mbool CService::GetSockAddr(struct sockaddr* paddr, socklen_t *addrlen) const[m
         paddrin->sin_port = htons(port);[m
         return true;[m
     }[m
[31m-    if (IsIPv6()) {[m
[32m+[m[32m    if (IsIPv6() || IsCJDNS()) {[m
         if (*addrlen < (socklen_t)sizeof(struct sockaddr_in6))[m
             return false;[m
         *addrlen = sizeof(struct sockaddr_in6);[m
[33mdiff --git a/src/netaddress.h b/src/netaddress.h[m
[33mindex 66c8c48f08..340d013ada 100644[m
[33m--- a/src/netaddress.h[m
[33m+++ b/src/netaddress.h[m
[36m@@ -224,7 +224,7 @@[m [mpublic:[m
      */[m
     bool IsRelayable() const[m
     {[m
[31m-        return IsIPv4() || IsIPv6() || IsTor() || IsI2P();[m
[32m+[m[32m        return IsIPv4() || IsIPv6() || IsTor() || IsI2P() || IsCJDNS();[m
     }[m
 [m
     /**[m
[36m@@ -565,6 +565,8 @@[m [mpublic:[m
         READWRITEAS(CNetAddr, obj);[m
         READWRITE(Using<BigEndianFormatter<2>>(obj.port));[m
     }[m
[32m+[m
[32m+[m[32m    friend CService MaybeFlipIPv6toCJDNS(const CService& service);[m
 };[m
 [m
 #endif // BITCOIN_NETADDRESS_H[m
[33mdiff --git a/src/netbase.cpp b/src/netbase.cpp[m
[33mindex 64d17189a6..6191f25cd9 100644[m
[33m--- a/src/netbase.cpp[m
[33m+++ b/src/netbase.cpp[m
[36m@@ -96,6 +96,9 @@[m [menum Network ParseNetwork(const std::string& net_in) {[m
     if (net == "i2p") {[m
         return NET_I2P;[m
     }[m
[32m+[m[32m    if (net == "cjdns") {[m
[32m+[m[32m        return NET_CJDNS;[m
[32m+[m[32m    }[m
     return NET_UNROUTABLE;[m
 }[m
 [m
[36m@@ -120,7 +123,7 @@[m [mstd::vector<std::string> GetNetworkNames(bool append_unroutable)[m
     std::vector<std::string> names;[m
     for (int n = 0; n < NET_MAX; ++n) {[m
         const enum Network network{static_cast<Network>(n)};[m
[31m-        if (network == NET_UNROUTABLE || network == NET_CJDNS || network == NET_INTERNAL) continue;[m
[32m+[m[32m        if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;[m
         names.emplace_back(GetNetworkName(network));[m
     }[m
     if (append_unroutable) {[m
[33mdiff --git a/src/rpc/net.cpp b/src/rpc/net.cpp[m
[33mindex a9bee33c5d..e33f1ce4a3 100644[m
[33m--- a/src/rpc/net.cpp[m
[33m+++ b/src/rpc/net.cpp[m
[36m@@ -566,7 +566,7 @@[m [mstatic UniValue GetNetworksInfo()[m
     UniValue networks(UniValue::VARR);[m
     for (int n = 0; n < NET_MAX; ++n) {[m
         enum Network network = static_cast<enum Network>(n);[m
[31m-        if (network == NET_UNROUTABLE || network == NET_CJDNS || network == NET_INTERNAL) continue;[m
[32m+[m[32m        if (network == NET_UNROUTABLE || network == NET_INTERNAL) continue;[m
         proxyType proxy;[m
         UniValue obj(UniValue::VOBJ);[m
         GetProxy(network, proxy);[m
[33mdiff --git a/src/test/netbase_tests.cpp b/src/test/netbase_tests.cpp[m
[33mindex 687d2f6747..b6d7496cc7 100644[m
[33m--- a/src/test/netbase_tests.cpp[m
[33m+++ b/src/test/netbase_tests.cpp[m
[36m@@ -339,11 +339,13 @@[m [mBOOST_AUTO_TEST_CASE(netbase_parsenetwork)[m
     BOOST_CHECK_EQUAL(ParseNetwork("ipv6"), NET_IPV6);[m
     BOOST_CHECK_EQUAL(ParseNetwork("onion"), NET_ONION);[m
     BOOST_CHECK_EQUAL(ParseNetwork("tor"), NET_ONION);[m
[32m+[m[32m    BOOST_CHECK_EQUAL(ParseNetwork("cjdns"), NET_CJDNS);[m
 [m
     BOOST_CHECK_EQUAL(ParseNetwork("IPv4"), NET_IPV4);[m
     BOOST_CHECK_EQUAL(ParseNetwork("IPv6"), NET_IPV6);[m
     BOOST_CHECK_EQUAL(ParseNetwork("ONION"), NET_ONION);[m
     BOOST_CHECK_EQUAL(ParseNetwork("TOR"), NET_ONION);[m
[32m+[m[32m    BOOST_CHECK_EQUAL(ParseNetwork("CJDNS"), NET_CJDNS);[m
 [m
     BOOST_CHECK_EQUAL(ParseNetwork(":)"), NET_UNROUTABLE);[m
     BOOST_CHECK_EQUAL(ParseNetwork("tÖr"), NET_UNROUTABLE);[m
[33mdiff --git a/test/functional/feature_proxy.py b/test/functional/feature_proxy.py[m
[33mindex 2fb5e328f5..70b9e019c1 100755[m
[33m--- a/test/functional/feature_proxy.py[m
[33m+++ b/test/functional/feature_proxy.py[m
[36m@@ -12,6 +12,7 @@[m [mTest plan:[m
     - `-proxy` (proxy everything)[m
     - `-onion` (proxy just onions)[m
     - `-proxyrandomize` Circuit randomization[m
[32m+[m[32m    - `-cjdnsreachable`[m
 - Proxy configurations to test on proxy side,[m
     - support no authentication (other proxy)[m
     - support no authentication + user/pass authentication (Tor)[m
[36m@@ -26,6 +27,7 @@[m [maddnode connect to IPv4[m
 addnode connect to IPv6[m
 addnode connect to onion[m
 addnode connect to generic DNS name[m
[32m+[m[32maddnode connect to a CJDNS address[m
 [m
 - Test getnetworkinfo for each node[m
 """[m
[36m@@ -50,14 +52,15 @@[m [mNET_IPV4 = "ipv4"[m
 NET_IPV6 = "ipv6"[m
 NET_ONION = "onion"[m
 NET_I2P = "i2p"[m
[32m+[m[32mNET_CJDNS = "cjdns"[m
 [m
 # Networks returned by RPC getnetworkinfo, defined in src/rpc/net.cpp::GetNetworksInfo()[m
[31m-NETWORKS = frozenset({NET_IPV4, NET_IPV6, NET_ONION, NET_I2P})[m
[32m+[m[32mNETWORKS = frozenset({NET_IPV4, NET_IPV6, NET_ONION, NET_I2P, NET_CJDNS})[m
 [m
 [m
 class ProxyTest(BitcoinTestFramework):[m
     def set_test_params(self):[m
[31m-        self.num_nodes = 4[m
[32m+[m[32m        self.num_nodes = 5[m
         self.setup_clean_chain = True[m
 [m
     def setup_nodes(self):[m
[36m@@ -101,7 +104,9 @@[m [mclass ProxyTest(BitcoinTestFramework):[m
             ['-listen', f'-proxy={self.conf1.addr[0]}:{self.conf1.addr[1]}',f'-onion={self.conf2.addr[0]}:{self.conf2.addr[1]}',[m
                 f'-i2psam={self.i2p_sam[0]}:{self.i2p_sam[1]}', '-i2pacceptincoming=0', '-proxyrandomize=0'],[m
             ['-listen', f'-proxy={self.conf2.addr[0]}:{self.conf2.addr[1]}','-proxyrandomize=1'],[m
[31m-            [][m
[32m+[m[32m            [],[m
[32m+[m[32m            ['-listen', f'-proxy={self.conf1.addr[0]}:{self.conf1.addr[1]}','-proxyrandomize=1',[m
[32m+[m[32m                '-cjdnsreachable'][m
         ][m
         if self.have_ipv6:[m
             args[3] = ['-listen', f'-proxy=[{self.conf3.addr[0]}]:{self.conf3.addr[1]}','-proxyrandomize=0', '-noonion'][m
[36m@@ -113,7 +118,7 @@[m [mclass ProxyTest(BitcoinTestFramework):[m
             if peer["addr"] == addr:[m
                 assert_equal(peer["network"], network)[m
 [m
[31m-    def node_test(self, node, proxies, auth, test_onion=True):[m
[32m+[m[32m    def node_test(self, node, *, proxies, auth, test_onion, test_cjdns):[m
         rv = [][m
         addr = "15.61.23.23:1234"[m
         self.log.debug(f"Test: outgoing IPv4 connection through node for address {addr}")[m
[36m@@ -161,6 +166,21 @@[m [mclass ProxyTest(BitcoinTestFramework):[m
             rv.append(cmd)[m
             self.network_test(node, addr, network=NET_ONION)[m
 [m
[32m+[m[32m        if test_cjdns:[m
[32m+[m[32m            addr = "[fc00:1:2:3:4:5:6:7]:8888"[m
[32m+[m[32m            self.log.debug(f"Test: outgoing CJDNS connection through node for address {addr}")[m
[32m+[m[32m            node.addnode(addr, "onetry")[m
[32m+[m[32m            cmd = proxies[1].queue.get()[m
[32m+[m[32m            assert isinstance(cmd, Socks5Command)[m
[32m+[m[32m            assert_equal(cmd.atyp, AddressType.DOMAINNAME)[m
[32m+[m[32m            assert_equal(cmd.addr, b"fc00:1:2:3:4:5:6:7")[m
[32m+[m[32m            assert_equal(cmd.port, 8888)[m
[32m+[m[32m            if not auth:[m
[32m+[m[32m                assert_equal(cmd.username, None)[m
[32m+[m[32m                assert_equal(cmd.password, None)[m
[32m+[m[32m            rv.append(cmd)[m
[32m+[m[32m            self.network_test(node, addr, network=NET_CJDNS)[m
[32m+[m
         addr = "node.noumenon:8333"[m
         self.log.debug(f"Test: outgoing DNS name connection through node for address {addr}")[m
         node.addnode(addr, "onetry")[m
[36m@@ -179,20 +199,33 @@[m [mclass ProxyTest(BitcoinTestFramework):[m
 [m
     def run_test(self):[m
         # basic -proxy[m
[31m-        self.node_test(self.nodes[0], [self.serv1, self.serv1, self.serv1, self.serv1], False)[m
[32m+[m[32m        self.node_test(self.nodes[0],[m
[32m+[m[32m            proxies=[self.serv1, self.serv1, self.serv1, self.serv1],[m
[32m+[m[32m            auth=False, test_onion=True, test_cjdns=False)[m
 [m
         # -proxy plus -onion[m
[31m-        self.node_test(self.nodes[1], [self.serv1, self.serv1, self.serv2, self.serv1], False)[m
[32m+[m[32m        self.node_test(self.nodes[1],[m
[32m+[m[32m            proxies=[self.serv1, self.serv1, self.serv2, self.serv1],[m
[32m+[m[32m            auth=False, test_onion=True, test_cjdns=False)[m
 [m
         # -proxy plus -onion, -proxyrandomize[m
[31m-        rv = self.node_test(self.nodes[2], [self.serv2, self.serv2, self.serv2, self.serv2], True)[m
[32m+[m[32m        rv = self.node_test(self.nodes[2],[m
[32m+[m[32m            proxies=[self.serv2, self.serv2, self.serv2, self.serv2],[m
[32m+[m[32m            auth=True, test_onion=True, test_cjdns=False)[m
         # Check that credentials as used for -proxyrandomize connections are unique[m
         credentials = set((x.username,x.password) for x in rv)[m
         assert_equal(len(credentials), len(rv))[m
 [m
         if self.have_ipv6:[m
             # proxy on IPv6 localhost[m
[31m-            self.node_test(self.nodes[3], [self.serv3, self.serv3, self.serv3, self.serv3], False, False)[m
[32m+[m[32m            self.node_test(self.nodes[3],[m
[32m+[m[32m                proxies=[self.serv3, self.serv3, self.serv3, self.serv3],[m
[32m+[m[32m                auth=False, test_onion=False, test_cjdns=False)[m
[32m+[m
[32m+[m[32m        # -proxy=unauth -proxyrandomize=1 -cjdnsreachable[m
[32m+[m[32m        self.node_test(self.nodes[4],[m
[32m+[m[32m            proxies=[self.serv1, self.serv1, self.serv1, self.serv1],[m
[32m+[m[32m            auth=False, test_onion=True, test_cjdns=True)[m
 [m
         def networks_dict(d):[m
             r = {}[m
[36m@@ -214,6 +247,7 @@[m [mclass ProxyTest(BitcoinTestFramework):[m
             assert_equal(n0[net]['proxy_randomize_credentials'], expected_randomize)[m
         assert_equal(n0['onion']['reachable'], True)[m
         assert_equal(n0['i2p']['reachable'], False)[m
[32m+[m[32m        assert_equal(n0['cjdns']['reachable'], False)[m
 [m
         n1 = networks_dict(self.nodes[1].getnetworkinfo())[m
         assert_equal(NETWORKS, n1.keys())[m
[36m@@ -240,6 +274,7 @@[m [mclass ProxyTest(BitcoinTestFramework):[m
             assert_equal(n2[net]['proxy_randomize_credentials'], expected_randomize)[m
         assert_equal(n2['onion']['reachable'], True)[m
         assert_equal(n2['i2p']['reachable'], False)[m
[32m+[m[32m        assert_equal(n2['cjdns']['reachable'], False)[m
 [m
         if self.have_ipv6:[m
             n3 = networks_dict(self.nodes[3].getnetworkinfo())[m
[36m@@ -253,6 +288,22 @@[m [mclass ProxyTest(BitcoinTestFramework):[m
                 assert_equal(n3[net]['proxy_randomize_credentials'], False)[m
             assert_equal(n3['onion']['reachable'], False)[m
             assert_equal(n3['i2p']['reachable'], False)[m
[32m+[m[32m            assert_equal(n3['cjdns']['reachable'], False)[m
[32m+[m
[32m+[m[32m        n4 = networks_dict(self.nodes[4].getnetworkinfo())[m
[32m+[m[32m        assert_equal(NETWORKS, n4.keys())[m
[32m+[m[32m        for net in NETWORKS:[m
[32m+[m[32m            if net == NET_I2P:[m
[32m+[m[32m                expected_proxy = ''[m
[32m+[m[32m                expected_randomize = False[m
[32m+[m[32m            else:[m
[32m+[m[32m                expected_proxy = '%s:%i' % (self.conf1.addr)[m
[32m+[m[32m                expected_randomize = True[m
[32m+[m[32m            assert_equal(n4[net]['proxy'], expected_proxy)[m
[32m+[m[32m            assert_equal(n4[net]['proxy_randomize_credentials'], expected_randomize)[m
[32m+[m[32m        assert_equal(n4['onion']['reachable'], True)[m
[32m+[m[32m        assert_equal(n4['i2p']['reachable'], False)[m
[32m+[m[32m        assert_equal(n4['cjdns']['reachable'], True)[m
 [m
 [m
 if __name__ == '__main__':[m
[33mdiff --git a/test/functional/interface_bitcoin_cli.py b/test/functional/interface_bitcoin_cli.py[m
[33mindex c28186cde7..ae665958b9 100755[m
[33m--- a/test/functional/interface_bitcoin_cli.py[m
[33m+++ b/test/functional/interface_bitcoin_cli.py[m
[36m@@ -136,7 +136,7 @@[m [mclass TestBitcoinCli(BitcoinTestFramework):[m
         network_info = self.nodes[0].getnetworkinfo()[m
         cli_get_info_string = self.nodes[0].cli('-getinfo').send_cli()[m
         cli_get_info = cli_get_info_string_to_dict(cli_get_info_string)[m
[31m-        assert_equal(cli_get_info["Proxies"], "127.0.0.1:9050 (ipv4, ipv6, onion), 127.0.0.1:7656 (i2p)")[m
[32m+[m[32m        assert_equal(cli_get_info["Proxies"], "127.0.0.1:9050 (ipv4, ipv6, onion, cjdns), 127.0.0.1:7656 (i2p)")[m
 [m
         if self.is_wallet_compiled():[m
             self.log.info("Test -getinfo and bitcoin-cli getwalletinfo return expected wallet info")[m
[33mdiff --git a/test/functional/rpc_net.py b/test/functional/rpc_net.py[m
[33mindex 0f3bbce54c..0857f4e0ca 100755[m
[33m--- a/test/functional/rpc_net.py[m
[33m+++ b/test/functional/rpc_net.py[m
[36m@@ -106,7 +106,7 @@[m [mclass NetTest(BitcoinTestFramework):[m
         assert_equal(peer_info[1][1]['connection_type'], 'inbound')[m
 [m
         # Check dynamically generated networks list in getpeerinfo help output.[m
[31m-        assert "(ipv4, ipv6, onion, i2p, not_publicly_routable)" in self.nodes[0].help("getpeerinfo")[m
[32m+[m[32m        assert "(ipv4, ipv6, onion, i2p, cjdns, not_publicly_routable)" in self.nodes[0].help("getpeerinfo")[m
 [m
     def test_getnettotals(self):[m
         self.log.info("Test getnettotals")[m
[36m@@ -157,7 +157,7 @@[m [mclass NetTest(BitcoinTestFramework):[m
             assert_net_servicesnames(int(info["localservices"], 0x10), info["localservicesnames"])[m
 [m
         # Check dynamically generated networks list in getnetworkinfo help output.[m
[31m-        assert "(ipv4, ipv6, onion, i2p)" in self.nodes[0].help("getnetworkinfo")[m
[32m+[m[32m        assert "(ipv4, ipv6, onion, i2p, cjdns)" in self.nodes[0].help("getnetworkinfo")[m
 [m
     def test_getaddednodeinfo(self):[m
         self.log.info("Test getaddednodeinfo")[m
[36m@@ -228,8 +228,8 @@[m [mclass NetTest(BitcoinTestFramework):[m
         assert_equal(res[0]["port"], 8333)[m
         assert_equal(res[0]["services"], P2P_SERVICES)[m
 [m
[31m-        # Test for the absence of onion and I2P addresses.[m
[31m-        for network in ["onion", "i2p"]:[m
[32m+[m[32m        # Test for the absence of onion, I2P and CJDNS addresses.[m
[32m+[m[32m        for network in ["onion", "i2p", "cjdns"]:[m
             assert_equal(self.nodes[0].getnodeaddresses(0, network), [])[m
 [m
         # Test invalid arguments.[m