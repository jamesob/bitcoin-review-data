[33mdiff --git a/test/functional/feature_assumevalid.py b/test/functional/feature_assumevalid.py[m
[33mindex 67cacaa9ce..482c29c994 100755[m
[33m--- a/test/functional/feature_assumevalid.py[m
[33m+++ b/test/functional/feature_assumevalid.py[m
[36m@@ -83,8 +83,6 @@[m [mclass AssumeValidTest(BitcoinTestFramework):[m
                 break[m
 [m
     def run_test(self):[m
[31m-        p2p0 = self.nodes[0].add_p2p_connection(BaseNode())[m
[31m-[m
         # Build the blockchain[m
         self.tip = int(self.nodes[0].getbestblockhash(), 16)[m
         self.block_time = self.nodes[0].getblock(self.nodes[0].getbestblockhash())['time'] + 1[m
[36m@@ -139,28 +137,23 @@[m [mclass AssumeValidTest(BitcoinTestFramework):[m
             self.block_time += 1[m
             height += 1[m
 [m
[31m-        self.nodes[0].disconnect_p2ps()[m
[31m-[m
         # Start node1 and node2 with assumevalid so they accept a block with a bad signature.[m
         self.start_node(1, extra_args=["-assumevalid=" + hex(block102.sha256)])[m
         self.start_node(2, extra_args=["-assumevalid=" + hex(block102.sha256)])[m
 [m
         p2p0 = self.nodes[0].add_p2p_connection(BaseNode())[m
[1;35m-        p2p1 = self.nodes[1].add_p2p_connection(BaseNode())[m
[1;34m-        p2p2 = self.nodes[2].add_p2p_connection(BaseNode())[m
[31m-[m
[31m-        # send header lists to all three nodes[m
         p2p0.send_header_for_blocks(self.blocks[0:2000])[m
         p2p0.send_header_for_blocks(self.blocks[2000:])[m
[2m-        p2p1.send_header_for_blocks(self.blocks[0:2000])[m
[1;35m-        p2p1.send_header_for_blocks(self.blocks[2000:])[m
[1;34m-        p2p2.send_header_for_blocks(self.blocks[0:200])[m
 [m
         # Send blocks to node0. Block 102 will be rejected.[m
         self.send_blocks_until_disconnected(p2p0)[m
         self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)[m
         assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)[m
 [m
[1;36m+[m[1;36m        p2p1 = self.nodes[1].add_p2p_connection(BaseNode())[m
[1;33m+[m[1;33m        p2p1.send_header_for_blocks(self.blocks[0:2000])[m
[2;3m+[m[2;3m        p2p1.send_header_for_blocks(self.blocks[2000:])[m
[32m+[m
         # Send all blocks to node1. All blocks will be accepted.[m
         for i in range(2202):[m
             p2p1.send_message(msg_block(self.blocks[i]))[m
[36m@@ -168,6 +161,9 @@[m [mclass AssumeValidTest(BitcoinTestFramework):[m
         p2p1.sync_with_ping(960)[m
         assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)[m
 [m
[1;36m+[m[1;36m        p2p2 = self.nodes[2].add_p2p_connection(BaseNode())[m
[1;33m+[m[1;33m        p2p2.send_header_for_blocks(self.blocks[0:200])[m
[32m+[m
         # Send blocks to node2. Block 102 will be rejected.[m
         self.send_blocks_until_disconnected(p2p2)[m
         self.wait_until(lambda: self.nodes[2].getblockcount() >= COINBASE_MATURITY + 1)[m