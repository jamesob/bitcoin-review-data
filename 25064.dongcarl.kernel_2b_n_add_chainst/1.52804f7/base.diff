[33mdiff --git a/src/Makefile.am b/src/Makefile.am[m
[33mindex 357e562c69..b8a187d14b 100644[m
[33m--- a/src/Makefile.am[m
[33m+++ b/src/Makefile.am[m
[36m@@ -130,6 +130,7 @@[m [mBITCOIN_CORE_H = \[m
   chainparams.h \[m
   chainparamsbase.h \[m
   chainparamsseeds.h \[m
[32m+[m[32m  chainstatemanager_opts.h \[m
   checkqueue.h \[m
   clientversion.h \[m
   coins.h \[m
[36m@@ -876,7 +877,6 @@[m [mlibbitcoinkernel_la_SOURCES = \[m
   init/common.cpp \[m
   key.cpp \[m
   logging.cpp \[m
[31m-  netaddress.cpp \[m
   node/blockstorage.cpp \[m
   node/chainstate.cpp \[m
   node/coinstats.cpp \[m
[36m@@ -905,11 +905,9 @@[m [mlibbitcoinkernel_la_SOURCES = \[m
   support/lockedpool.cpp \[m
   sync.cpp \[m
   threadinterrupt.cpp \[m
[31m-  timedata.cpp \[m
   txdb.cpp \[m
   txmempool.cpp \[m
   uint256.cpp \[m
[31m-  util/asmap.cpp \[m
   util/bytevectorhash.cpp \[m
   util/check.cpp \[m
   util/getuniquepath.cpp \[m
[33mdiff --git a/src/bitcoin-chainstate.cpp b/src/bitcoin-chainstate.cpp[m
[33mindex ab805ac1ec..e4f83c350f 100644[m
[33m--- a/src/bitcoin-chainstate.cpp[m
[33m+++ b/src/bitcoin-chainstate.cpp[m
[36m@@ -70,7 +70,11 @@[m [mint main(int argc, char* argv[])[m
 [m
 [m
     // SETUP: Chainstate[m
[31m-    ChainstateManager chainman{chainparams};[m
[32m+[m[32m    const ChainstateManager::Options chainman_opts{[m
[32m+[m[32m        chainparams,[m
[32m+[m[32m        static_cast<int64_t(*)()>(GetTime),[m
[32m+[m[32m    };[m
[32m+[m[32m    ChainstateManager chainman{chainman_opts};[m
 [m
     auto rv = node::LoadChainstate(false,[m
                                    std::ref(chainman),[m
[33mdiff --git a/src/chainstatemanager_opts.h b/src/chainstatemanager_opts.h[m
[33mnew file mode 100644[m
[33mindex 0000000000..bf4b856d9b[m
[33m--- /dev/null[m
[33m+++ b/src/chainstatemanager_opts.h[m
[36m@@ -0,0 +1,23 @@[m
[32m+[m[32m// Copyright (c) 2022 The Bitcoin Core developers[m
[32m+[m[32m// Distributed under the MIT software license, see the accompanying[m
[32m+[m[32m// file COPYING or http://www.opensource.org/licenses/mit-license.php.[m
[32m+[m
[32m+[m[32m#ifndef BITCOIN_CHAINSTATEMANAGER_OPTS_H[m
[32m+[m[32m#define BITCOIN_CHAINSTATEMANAGER_OPTS_H[m
[32m+[m
[32m+[m[32m#include <cstdint>[m
[32m+[m[32m#include <functional>[m
[32m+[m
[32m+[m[32mclass CChainParams;[m
[32m+[m
[32m+[m[32m/**[m
[32m+[m[32m * An options struct for `ChainstateManager`, more ergonomically referred to as[m
[32m+[m[32m * `ChainstateManager::Options` due to the using-declaration in[m
[32m+[m[32m * `ChainstateManager`.[m
[32m+[m[32m */[m
[32m+[m[32mstruct ChainstateManagerOpts {[m
[32m+[m[32m    const CChainParams& chainparams;[m
[32m+[m[32m    const std::function<int64_t()> adjusted_time_callback{nullptr};[m
[32m+[m[32m};[m
[32m+[m
[32m+[m[32m#endif // BITCOIN_CHAINSTATEMANAGER_OPTS_H[m
[33mdiff --git a/src/init.cpp b/src/init.cpp[m
[33mindex e180a2b5cd..51b3323b58 100644[m
[33m--- a/src/init.cpp[m
[33m+++ b/src/init.cpp[m
[36m@@ -1424,7 +1424,11 @@[m [mbool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)[m
     for (bool fLoaded = false; !fLoaded && !ShutdownRequested();) {[m
         node.mempool = std::make_unique<CTxMemPool>(node.fee_estimator.get(), mempool_check_ratio);[m
 [m
[31m-        node.chainman = std::make_unique<ChainstateManager>(chainparams);[m
[32m+[m[32m        const ChainstateManager::Options chainman_opts{[m
[32m+[m[32m            chainparams,[m
[32m+[m[32m            GetAdjustedTime,[m
[32m+[m[32m        };[m
[32m+[m[32m        node.chainman = std::make_unique<ChainstateManager>(chainman_opts);[m
         ChainstateManager& chainman = *node.chainman;[m
 [m
         const bool fReset = fReindex;[m
[33mdiff --git a/src/node/miner.cpp b/src/node/miner.cpp[m
[33mindex 770ccdbe1a..a48f69b249 100644[m
[33m--- a/src/node/miner.cpp[m
[33m+++ b/src/node/miner.cpp[m
[36m@@ -167,7 +167,7 @@[m [mstd::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc[m
     pblocktemplate->vTxSigOpsCost[0] = WITNESS_SCALE_FACTOR * GetLegacySigOpCount(*pblock->vtx[0]);[m
 [m
     BlockValidationState state;[m
[31m-    if (!TestBlockValidity(state, chainparams, m_chainstate, *pblock, pindexPrev, false, false)) {[m
[32m+[m[32m    if (!TestBlockValidity(state, chainparams, m_chainstate, *pblock, pindexPrev, GetAdjustedTime, false, false)) {[m
         throw std::runtime_error(strprintf("%s: TestBlockValidity failed: %s", __func__, state.ToString()));[m
     }[m
     int64_t nTime2 = GetTimeMicros();[m
[33mdiff --git a/src/rpc/mining.cpp b/src/rpc/mining.cpp[m
[33mindex 568474fcb9..4c7d5fe221 100644[m
[33m--- a/src/rpc/mining.cpp[m
[33m+++ b/src/rpc/mining.cpp[m
[36m@@ -27,6 +27,7 @@[m
 #include <script/script.h>[m
 #include <script/signingprovider.h>[m
 #include <shutdown.h>[m
[32m+[m[32m#include <timedata.h>[m
 #include <txmempool.h>[m
 #include <univalue.h>[m
 #include <util/strencodings.h>[m
[36m@@ -374,7 +375,7 @@[m [mstatic RPCHelpMan generateblock()[m
         LOCK(cs_main);[m
 [m
         BlockValidationState state;[m
[31m-        if (!TestBlockValidity(state, chainparams, chainman.ActiveChainstate(), block, chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock), false, false)) {[m
[32m+[m[32m        if (!TestBlockValidity(state, chainparams, chainman.ActiveChainstate(), block, chainman.m_blockman.LookupBlockIndex(block.hashPrevBlock), GetAdjustedTime, false, false)) {[m
             throw JSONRPCError(RPC_VERIFY_ERROR, strprintf("TestBlockValidity failed: %s", state.ToString()));[m
         }[m
     }[m
[36m@@ -643,7 +644,7 @@[m [mstatic RPCHelpMan getblocktemplate()[m
             if (block.hashPrevBlock != pindexPrev->GetBlockHash())[m
                 return "inconclusive-not-best-prevblk";[m
             BlockValidationState state;[m
[31m-            TestBlockValidity(state, Params(), active_chainstate, block, pindexPrev, false, true);[m
[32m+[m[32m            TestBlockValidity(state, Params(), active_chainstate, block, pindexPrev, GetAdjustedTime, false, true);[m
             return BIP22ValidationResult(state);[m
         }[m
 [m
[33mdiff --git a/src/test/miner_tests.cpp b/src/test/miner_tests.cpp[m
[33mindex 0c3a13c5f8..05abd9df2b 100644[m
[33m--- a/src/test/miner_tests.cpp[m
[33m+++ b/src/test/miner_tests.cpp[m
[36m@@ -10,6 +10,7 @@[m
 #include <node/miner.h>[m
 #include <policy/policy.h>[m
 #include <script/standard.h>[m
[32m+[m[32m#include <timedata.h>[m
 #include <txmempool.h>[m
 #include <uint256.h>[m
 #include <util/strencodings.h>[m
[33mdiff --git a/src/test/util/setup_common.cpp b/src/test/util/setup_common.cpp[m
[33mindex 6891629f8e..09ca89d6e0 100644[m
[33m--- a/src/test/util/setup_common.cpp[m
[33m+++ b/src/test/util/setup_common.cpp[m
[36m@@ -29,6 +29,7 @@[m
 #include <shutdown.h>[m
 #include <streams.h>[m
 #include <test/util/net.h>[m
[32m+[m[32m#include <timedata.h>[m
 #include <txdb.h>[m
 #include <util/strencodings.h>[m
 #include <util/string.h>[m
[36m@@ -164,7 +165,11 @@[m [mChainTestingSetup::ChainTestingSetup(const std::string& chainName, const std::ve[m
 [m
     m_cache_sizes = CalculateCacheSizes(m_args);[m
 [m
[31m-    m_node.chainman = std::make_unique<ChainstateManager>(chainparams);[m
[32m+[m[32m    const ChainstateManager::Options chainman_opts{[m
[32m+[m[32m        chainparams,[m
[32m+[m[32m        GetAdjustedTime,[m
[32m+[m[32m    };[m
[32m+[m[32m    m_node.chainman = std::make_unique<ChainstateManager>(chainman_opts);[m
     m_node.chainman->m_blockman.m_block_tree_db = std::make_unique<CBlockTreeDB>(m_cache_sizes.block_tree_db, true);[m
 [m
     // Start script-checking threads. Set g_parallel_script_checks to true so they are used.[m
[33mdiff --git a/src/test/validation_chainstate_tests.cpp b/src/test/validation_chainstate_tests.cpp[m
[33mindex e7c7584f1c..98cb713a81 100644[m
[33m--- a/src/test/validation_chainstate_tests.cpp[m
[33m+++ b/src/test/validation_chainstate_tests.cpp[m
[36m@@ -3,13 +3,14 @@[m
 // file COPYING or http://www.opensource.org/licenses/mit-license.php.[m
 //[m
 #include <chainparams.h>[m
[31m-#include <random.h>[m
[31m-#include <uint256.h>[m
 #include <consensus/validation.h>[m
[31m-#include <sync.h>[m
[32m+[m[32m#include <random.h>[m
 #include <rpc/blockchain.h>[m
[32m+[m[32m#include <sync.h>[m
 #include <test/util/chainstate.h>[m
 #include <test/util/setup_common.h>[m
[32m+[m[32m#include <timedata.h>[m
[32m+[m[32m#include <uint256.h>[m
 #include <validation.h>[m
 [m
 #include <vector>[m
[36m@@ -22,8 +23,12 @@[m [mBOOST_FIXTURE_TEST_SUITE(validation_chainstate_tests, TestingSetup)[m
 //![m
 BOOST_AUTO_TEST_CASE(validation_chainstate_resize_caches)[m
 {[m
[31m-    const CChainParams& chainparams = Params();[m
[31m-    ChainstateManager manager(chainparams);[m
[32m+[m[32m    const ChainstateManager::Options chainman_opts{[m
[32m+[m[32m        Params(),[m
[32m+[m[32m        GetAdjustedTime,[m
[32m+[m[32m    };[m
[32m+[m[32m    ChainstateManager manager{chainman_opts};[m
[32m+[m
     WITH_LOCK(::cs_main, manager.m_blockman.m_block_tree_db = std::make_unique<CBlockTreeDB>(1 << 20, true));[m
     CTxMemPool mempool;[m
 [m
[33mdiff --git a/src/validation.cpp b/src/validation.cpp[m
[33mindex 51d77b7945..31ddf43d3e 100644[m
[33m--- a/src/validation.cpp[m
[33m+++ b/src/validation.cpp[m
[36m@@ -36,7 +36,6 @@[m
 #include <script/sigcache.h>[m
 #include <shutdown.h>[m
 #include <signet.h>[m
[31m-#include <timedata.h>[m
 #include <tinyformat.h>[m
 #include <txdb.h>[m
 #include <txmempool.h>[m
[36m@@ -3613,7 +3612,7 @@[m [mbool ChainstateManager::AcceptBlockHeader(const CBlockHeader& block, BlockValida[m
             LogPrint(BCLog::VALIDATION, "%s: %s prev block invalid\n", __func__, hash.ToString());[m
             return state.Invalid(BlockValidationResult::BLOCK_INVALID_PREV, "bad-prevblk");[m
         }[m
[31m-        if (!ContextualCheckBlockHeader(block, state, m_blockman, *this, pindexPrev, GetAdjustedTime())) {[m
[32m+[m[32m        if (!ContextualCheckBlockHeader(block, state, m_blockman, *this, pindexPrev, m_adjusted_time_callback())) {[m
             LogPrint(BCLog::VALIDATION, "%s: Consensus::ContextualCheckBlockHeader: %s, %s\n", __func__, hash.ToString(), state.ToString());[m
             return false;[m
         }[m
[36m@@ -3837,6 +3836,7 @@[m [mbool TestBlockValidity(BlockValidationState& state,[m
                        CChainState& chainstate,[m
                        const CBlock& block,[m
                        CBlockIndex* pindexPrev,[m
[32m+[m[32m                       const std::function<int64_t()>& adjusted_time_callback,[m
                        bool fCheckPOW,[m
                        bool fCheckMerkleRoot)[m
 {[m
[36m@@ -3850,7 +3850,7 @@[m [mbool TestBlockValidity(BlockValidationState& state,[m
     indexDummy.phashBlock = &block_hash;[m
 [m
     // NOTE: CheckBlockHeader is called by CheckBlock[m
[31m-    if (!ContextualCheckBlockHeader(block, state, chainstate.m_blockman, chainstate.m_chainman, pindexPrev, GetAdjustedTime()))[m
[32m+[m[32m    if (!ContextualCheckBlockHeader(block, state, chainstate.m_blockman, chainstate.m_chainman, pindexPrev, adjusted_time_callback()))[m
         return error("%s: Consensus::ContextualCheckBlockHeader: %s", __func__, state.ToString());[m
     if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))[m
         return error("%s: Consensus::CheckBlock: %s", __func__, state.ToString());[m
[33mdiff --git a/src/validation.h b/src/validation.h[m
[33mindex 04745a6e36..213737870f 100644[m
[33m--- a/src/validation.h[m
[33m+++ b/src/validation.h[m
[36m@@ -14,6 +14,7 @@[m
 #include <attributes.h>[m
 #include <chain.h>[m
 #include <chainparams.h>[m
[32m+[m[32m#include <chainstatemanager_opts.h>[m
 #include <consensus/amount.h>[m
 #include <deploymentstatus.h>[m
 #include <fs.h>[m
[36m@@ -361,6 +362,7 @@[m [mbool TestBlockValidity(BlockValidationState& state,[m
                        CChainState& chainstate,[m
                        const CBlock& block,[m
                        CBlockIndex* pindexPrev,[m
[32m+[m[32m                       const std::function<int64_t()>& adjusted_time_callback,[m
                        bool fCheckPOW = true,[m
                        bool fCheckMerkleRoot = true) EXCLUSIVE_LOCKS_REQUIRED(cs_main);[m
 [m
[36m@@ -836,6 +838,8 @@[m [mprivate:[m
 [m
     const CChainParams& m_chainparams;[m
 [m
[32m+[m[32m    const std::function<int64_t()> m_adjusted_time_callback;[m
[32m+[m
     //! Internal helper for ActivateSnapshot().[m
     [[nodiscard]] bool PopulateAndValidateSnapshot([m
         CChainState& snapshot_chainstate,[m
[36m@@ -853,7 +857,11 @@[m [mprivate:[m
     friend CChainState;[m
 [m
 public:[m
[31m-    explicit ChainstateManager(const CChainParams& chainparams) : m_chainparams{chainparams} { }[m
[32m+[m[32m    using Options = ChainstateManagerOpts;[m
[32m+[m
[32m+[m[32m    explicit ChainstateManager(const Options& opts)[m
[32m+[m[32m        : m_chainparams{opts.chainparams},[m
[32m+[m[32m          m_adjusted_time_callback{Assert(opts.adjusted_time_callback)} {};[m
 [m
     const CChainParams& GetParams() const { return m_chainparams; }[m
     const Consensus::Params& GetConsensus() const { return m_chainparams.GetConsensus(); }[m