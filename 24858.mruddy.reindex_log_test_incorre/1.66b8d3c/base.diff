[33mdiff --git a/src/Makefile.test.include b/src/Makefile.test.include[m
[33mindex 96a9a74802..8b1ae08414 100644[m
[33m--- a/src/Makefile.test.include[m
[33m+++ b/src/Makefile.test.include[m
[36m@@ -78,6 +78,7 @@[m [mBITCOIN_TESTS =\[m
   test/blockencodings_tests.cpp \[m
   test/blockfilter_index_tests.cpp \[m
   test/blockfilter_tests.cpp \[m
[32m+[m[32m  test/blockmanager_tests.cpp \[m
   test/bloom_tests.cpp \[m
   test/bswap_tests.cpp \[m
   test/checkqueue_tests.cpp \[m
[33mdiff --git a/src/node/blockstorage.cpp b/src/node/blockstorage.cpp[m
[33mindex 763fd29744..7eb5a83a2c 100644[m
[33m--- a/src/node/blockstorage.cpp[m
[33m+++ b/src/node/blockstorage.cpp[m
[36m@@ -785,19 +785,27 @@[m [mbool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const FlatFilePos& pos, c[m
     return true;[m
 }[m
 [m
[31m-/** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */[m
 FlatFilePos BlockManager::SaveBlockToDisk(const CBlock& block, int nHeight, CChain& active_chain, const CChainParams& chainparams, const FlatFilePos* dbp)[m
 {[m
     unsigned int nBlockSize = ::GetSerializeSize(block, CLIENT_VERSION);[m
     FlatFilePos blockPos;[m
[31m-    if (dbp != nullptr) {[m
[32m+[m[32m    const auto position_known {dbp != nullptr}; // if dbp is not nullptr, then the file and block within it are known to already reside on disk[m
[32m+[m[32m    if (position_known) {[m
         blockPos = *dbp;[m
[31m-    }[m
[31m-    if (!FindBlockPos(blockPos, nBlockSize + 8, nHeight, active_chain, block.GetBlockTime(), dbp != nullptr)) {[m
[32m+[m[32m    } else {[m
[32m+[m[32m        // when known, blockPos.nPos points at the offset of the block data in the blk file. that already accounts for[m
[32m+[m[32m        // the serialization header present in the file (the 4 magic message start bytes + the 4 length bytes = 8 bytes).[m
[32m+[m[32m        // we add 8 only for new blocks since they will have the serialization header added when written to disk.[m
[32m+[m[32m        // this avoids over accounting for the serialization header on existing blocks. such over accounting was a long[m
[32m+[m[32m        // standing bug that added undesirable 8 byte gaps into blk data files following a -reindex operation.[m
[32m+[m[32m        // for more info, see https://github.com/bitcoin/bitcoin/issues/21379[m
[32m+[m[32m        nBlockSize += 8U;[m
[32m+[m[32m    }[m
[32m+[m[32m    if (!FindBlockPos(blockPos, nBlockSize, nHeight, active_chain, block.GetBlockTime(), position_known)) {[m
         error("%s: FindBlockPos failed", __func__);[m
         return FlatFilePos();[m
     }[m
[31m-    if (dbp == nullptr) {[m
[32m+[m[32m    if (!position_known) {[m
         if (!WriteBlockToDisk(block, blockPos, chainparams.MessageStart())) {[m
             AbortNode("Failed to write block");[m
             return FlatFilePos();[m
[33mdiff --git a/src/test/blockmanager_tests.cpp b/src/test/blockmanager_tests.cpp[m
[33mnew file mode 100644[m
[33mindex 0000000000..a26c022066[m
[33m--- /dev/null[m
[33m+++ b/src/test/blockmanager_tests.cpp[m
[36m@@ -0,0 +1,40 @@[m
[32m+[m[32m// Copyright (c) 2022 The Bitcoin Core developers[m
[32m+[m[32m// Distributed under the MIT software license, see the accompanying[m
[32m+[m[32m// file COPYING or http://www.opensource.org/licenses/mit-license.php.[m
[32m+[m
[32m+[m[32m#include <chainparams.h>[m
[32m+[m[32m#include <node/blockstorage.h>[m
[32m+[m[32m#include <node/context.h>[m
[32m+[m[32m#include <validation.h>[m
[32m+[m
[32m+[m[32m#include <boost/test/unit_test.hpp>[m
[32m+[m[32m#include <test/util/setup_common.h>[m
[32m+[m
[32m+[m[32musing node::BlockManager;[m
[32m+[m
[32m+[m[32m// use BasicTestingSetup here for the data directory configuration, setup, and cleanup[m
[32m+[m[32mBOOST_FIXTURE_TEST_SUITE(blockmanager_tests, BasicTestingSetup)[m
[32m+[m
[32m+[m[32mBOOST_AUTO_TEST_CASE(blockmanager_find_block_pos)[m
[32m+[m[32m{[m
[32m+[m[32m    const auto params {CreateChainParams(ArgsManager{}, CBaseChainParams::MAIN)};[m
[32m+[m[32m    BlockManager blockman {};[m
[32m+[m[32m    CChain chain {};[m
[32m+[m[32m    // simulate adding a genesis block normally[m
[32m+[m[32m    BOOST_CHECK_EQUAL(blockman.SaveBlockToDisk(params->GenesisBlock(), 0, chain, *params, nullptr).nPos, 8U);[m
[32m+[m[32m    // simulate what happens during reindex[m
[32m+[m[32m    // simulate a well-formed genesis block being found at offset 8 in the blk00000.dat file[m
[32m+[m[32m    // the block is found at offset 8 because there is an 8 byte serialization header[m
[32m+[m[32m    // consisting of 4 magic bytes + 4 length bytes before each block in a well-formed blk file.[m
[32m+[m[32m    FlatFilePos pos{0, 8};[m
[32m+[m[32m    BOOST_CHECK_EQUAL(blockman.SaveBlockToDisk(params->GenesisBlock(), 0, chain, *params, &pos).nPos, 8U);[m
[32m+[m[32m    // now simulate what happens after reindex for the first new block processed[m
[32m+[m[32m    // the actual block contents don't matter, just that it's a block.[m
[32m+[m[32m    // verify that the write position is at offset 0x12d.[m
[32m+[m[32m    // this is a check to make sure that https://github.com/bitcoin/bitcoin/issues/21379 does not recur[m
[32m+[m[32m    // 8 bytes (for serialization header) + 285 (for serialized genesis block) = 293[m
[32m+[m[32m    // add another 8 bytes for the second block's serialization header and we get 293 + 8 = 301[m
[32m+[m[32m    BOOST_CHECK_EQUAL(blockman.SaveBlockToDisk(params->GenesisBlock(), 1, chain, *params, nullptr).nPos, 301U);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mBOOST_AUTO_TEST_SUITE_END()[m
[33mdiff --git a/src/validation.cpp b/src/validation.cpp[m
[33mindex f4b316f67a..d71c769995 100644[m
[33m--- a/src/validation.cpp[m
[33m+++ b/src/validation.cpp[m
[36m@@ -4356,7 +4356,18 @@[m [mvoid CChainState::LoadExternalBlockFile(FILE* fileIn, FlatFilePos* dbp)[m
                     }[m
                 }[m
             } catch (const std::exception& e) {[m
[31m-                LogPrintf("%s: Deserialize or I/O error - %s\n", __func__, e.what());[m
[32m+[m[32m                // historical bugs added extra data to the block files that does not deserialize cleanly.[m
[32m+[m[32m                // commonly this data is between readable blocks, but it does not really matter. such data is not fatal to the import process.[m
[32m+[m[32m                // the code that reads the block files deals with invalid data by simply ignoring it.[m
[32m+[m[32m                // it continues to search for the next {4 byte magic message start bytes + 4 byte length + block} that does deserialize cleanly[m
[32m+[m[32m                // and passes all of the other block validation checks dealing with POW and the merkle root, etc...[m
[32m+[m[32m                // we merely note with this informational log message when unexpected data is encountered.[m
[32m+[m[32m                // we could also be experiencing a storage system read error, or a read of a previous bad write. these are possible, but[m
[32m+[m[32m                // less likely scenarios. we don't have enough information to tell a difference here.[m
[32m+[m[32m                // the reindex process is not the place to attempt to clean and/or compact the block files. if so desired, a studious node operator[m
[32m+[m[32m                // may use knowledge of the fact that the block files are not entirely pristine in order to prepare a set of pristine, and[m
[32m+[m[32m                // perhaps ordered, block files for later reindexing.[m
[32m+[m[32m                LogPrint(BCLog::REINDEX, "%s: unexpected data at file offset 0x%x - %s. continuing\n", __func__, (nRewind - 1), e.what());[m
             }[m
         }[m
     } catch (const std::runtime_error& e) {[m