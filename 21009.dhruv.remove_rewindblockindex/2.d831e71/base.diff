[33mdiff --git a/src/init.cpp b/src/init.cpp[m
[33mindex 584b148af..a1c026f80 100644[m
[33m--- a/src/init.cpp[m
[33m+++ b/src/init.cpp[m
[36m@@ -1698,29 +1698,17 @@[m [mbool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA[m
                 break;[m
             }[m
 [m
[31m-            bool failed_rewind{false};[m
[31m-            // Can't hold cs_main while calling RewindBlockIndex, so retrieve the relevant[m
[31m-            // chainstates beforehand.[m
[31m-            for (CChainState* chainstate : WITH_LOCK(::cs_main, return chainman.GetAll())) {[m
[31m-                if (!fReset) {[m
[31m-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.[m
[31m-                    // It both disconnects blocks based on the chainstate, and drops block data in[m
[31m-                    // BlockIndex() based on lack of available witness data.[m
[31m-                    uiInterface.InitMessage(_("Rewinding blocks...").translated);[m
[31m-                    if (!chainstate->RewindBlockIndex(chainparams)) {[m
[31m-                        strLoadError = _([m
[31m-                            "Unable to rewind the database to a pre-fork state. "[m
[31m-                            "You will need to redownload the blockchain");[m
[31m-                        failed_rewind = true;[m
[31m-                        break; // out of the per-chainstate loop[m
[31m-                    }[m
[32m+[m[32m            if (!fReset) {[m
[32m+[m[32m                LOCK(cs_main);[m
[32m+[m[32m                auto chainstates{chainman.GetAll()};[m
[32m+[m[32m                if (std::any_of(chainstates.begin(), chainstates.end(),[m
[32m+[m[32m                                [&chainparams](const CChainState* cs) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return cs->NeedsRedownload(chainparams); })) {[m
[32m+[m[32m                    strLoadError = strprintf(_("Witness data for blocks after height %d requires validation. Please restart with -reindex."),[m
[32m+[m[32m                                             chainparams.GetConsensus().SegwitHeight);[m
[32m+[m[32m                    break;[m
                 }[m
             }[m
 [m
[31m-            if (failed_rewind) {[m
[31m-                break; // out of the chainstate activation do-while[m
[31m-            }[m
[31m-[m
             bool failed_verification = false;[m
 [m
             try {[m
[33mdiff --git a/src/validation.cpp b/src/validation.cpp[m
[33mindex 0c3aeced9..fdc7ef884 100644[m
[33m--- a/src/validation.cpp[m
[33m+++ b/src/validation.cpp[m
[36m@@ -4431,143 +4431,23 @@[m [mbool CChainState::ReplayBlocks(const CChainParams& params)[m
     return true;[m
 }[m
 [m
[31m-//! Helper for CChainState::RewindBlockIndex[m
[31m-void CChainState::EraseBlockData(CBlockIndex* index)[m
[32m+[m[32mbool CChainState::NeedsRedownload(const CChainParams& params) const[m
 {[m
     AssertLockHeld(cs_main);[m
[31m-    assert(!m_chain.Contains(index)); // Make sure this block isn't active[m
[31m-[m
[31m-    // Reduce validity[m
[31m-    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);[m
[31m-    // Remove have-data flags.[m
[31m-    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);[m
[31m-    // Remove storage location.[m
[31m-    index->nFile = 0;[m
[31m-    index->nDataPos = 0;[m
[31m-    index->nUndoPos = 0;[m
[31m-    // Remove various other things[m
[31m-    index->nTx = 0;[m
[31m-    index->nChainTx = 0;[m
[31m-    index->nSequenceId = 0;[m
[31m-    // Make sure it gets written.[m
[31m-    setDirtyBlockIndex.insert(index);[m
[31m-    // Update indexes[m
[31m-    setBlockIndexCandidates.erase(index);[m
[31m-    auto ret = m_blockman.m_blocks_unlinked.equal_range(index->pprev);[m
[31m-    while (ret.first != ret.second) {[m
[31m-        if (ret.first->second == index) {[m
[31m-            m_blockman.m_blocks_unlinked.erase(ret.first++);[m
[31m-        } else {[m
[31m-            ++ret.first;[m
[31m-        }[m
[31m-    }[m
[31m-    // Mark parent as eligible for main chain again[m
[31m-    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {[m
[31m-        setBlockIndexCandidates.insert(index->pprev);[m
[31m-    }[m
[31m-}[m
[31m-[m
[31m-bool CChainState::RewindBlockIndex(const CChainParams& params)[m
[31m-{[m
[31m-    // Note that during -reindex-chainstate we are called with an empty m_chain![m
 [m
[31m-    // First erase all post-segwit blocks without witness not in the main chain,[m
[31m-    // as this can we done without costly DisconnectTip calls. Active[m
[31m-    // blocks will be dealt with below (releasing cs_main in between).[m
[31m-    {[m
[31m-        LOCK(cs_main);[m
[31m-        for (const auto& entry : m_blockman.m_block_index) {[m
[31m-            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !m_chain.Contains(entry.second)) {[m
[31m-                EraseBlockData(entry.second);[m
[31m-            }[m
[31m-        }[m
[31m-    }[m
[32m+[m[32m    // At and above params.SegwitHeight, segwit consensus rules must be validated[m
[32m+[m[32m    CBlockIndex* block{m_chain.Tip()};[m
[32m+[m[32m    const int segwit_height{params.GetConsensus().SegwitHeight};[m
 [m
[31m-    // Find what height we need to reorganize to.[m
[31m-    CBlockIndex *tip;[m
[31m-    int nHeight = 1;[m
[31m-    {[m
[31m-        LOCK(cs_main);[m
[31m-        while (nHeight <= m_chain.Height()) {[m
[31m-            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all[m
[31m-            // blocks in ConnectBlock, we don't need to go back and[m
[31m-            // re-download/re-verify blocks from before segwit actually activated.[m
[31m-            if (IsWitnessEnabled(m_chain[nHeight - 1], params.GetConsensus()) && !(m_chain[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {[m
[31m-                break;[m
[31m-            }[m
[31m-            nHeight++;[m
[31m-        }[m
[31m-[m
[31m-        tip = m_chain.Tip();[m
[31m-    }[m
[31m-    // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1[m
[31m-[m
[31m-    BlockValidationState state;[m
[31m-    // Loop until the tip is below nHeight, or we reach a pruned block.[m
[31m-    while (!ShutdownRequested()) {[m
[31m-        {[m
[31m-            LOCK(cs_main);[m
[31m-            LOCK(m_mempool.cs);[m
[31m-            // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)[m
[31m-            assert(tip == m_chain.Tip());[m
[31m-            if (tip == nullptr || tip->nHeight < nHeight) break;[m
[31m-            if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {[m
[31m-                // If pruning, don't try rewinding past the HAVE_DATA point;[m
[31m-                // since older blocks can't be served anyway, there's[m
[31m-                // no need to walk further, and trying to DisconnectTip()[m
[31m-                // will fail (and require a needless reindex/redownload[m
[31m-                // of the blockchain).[m
[31m-                break;[m
[31m-            }[m
[31m-[m
[31m-            // Disconnect block[m
[31m-            if (!DisconnectTip(state, params, nullptr)) {[m
[31m-                return error("RewindBlockIndex: unable to disconnect block at height %i (%s)", tip->nHeight, state.ToString());[m
[31m-            }[m
[31m-[m
[31m-            // Reduce validity flag and have-data flags.[m
[31m-            // We do this after actual disconnecting, otherwise we'll end up writing the lack of data[m
[31m-            // to disk before writing the chainstate, resulting in a failure to continue if interrupted.[m
[31m-            // Note: If we encounter an insufficiently validated block that[m
[31m-            // is on m_chain, it must be because we are a pruning node, and[m
[31m-            // this block or some successor doesn't HAVE_DATA, so we were unable to[m
[31m-            // rewind all the way.  Blocks remaining on m_chain at this point[m
[31m-            // must not have their validity reduced.[m
[31m-            EraseBlockData(tip);[m
[31m-[m
[31m-            tip = tip->pprev;[m
[31m-        }[m
[31m-        // Make sure the queue of validation callbacks doesn't grow unboundedly.[m
[31m-        LimitValidationInterfaceQueue();[m
[31m-[m
[31m-        // Occasionally flush state to disk.[m
[31m-        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {[m
[31m-            LogPrintf("RewindBlockIndex: unable to flush state to disk (%s)\n", state.ToString());[m
[31m-            return false;[m
[31m-        }[m
[31m-    }[m
[31m-[m
[31m-    {[m
[31m-        LOCK(cs_main);[m
[31m-        if (m_chain.Tip() != nullptr) {[m
[31m-            // We can't prune block index candidates based on our tip if we have[m
[31m-            // no tip due to m_chain being empty![m
[31m-            PruneBlockIndexCandidates();[m
[31m-[m
[31m-            CheckBlockIndex(params.GetConsensus());[m
[31m-[m
[31m-            // FlushStateToDisk can possibly read ::ChainActive(). Be conservative[m
[31m-            // and skip it here, we're about to -reindex-chainstate anyway, so[m
[31m-            // it'll get called a bunch real soon.[m
[31m-            BlockValidationState state;[m
[31m-            if (!FlushStateToDisk(params, state, FlushStateMode::ALWAYS)) {[m
[31m-                LogPrintf("RewindBlockIndex: unable to flush state to disk (%s)\n", state.ToString());[m
[31m-                return false;[m
[31m-            }[m
[32m+[m[32m    while (block != nullptr && block->nHeight >= segwit_height) {[m
[32m+[m[32m        if (!(block->nStatus & BLOCK_OPT_WITNESS)) {[m
[32m+[m[32m            // block is insufficiently validated for a segwit client[m
[32m+[m[32m            return true;[m
         }[m
[32m+[m[32m        block = block->pprev;[m
     }[m
 [m
[31m-    return true;[m
[32m+[m[32m    return false;[m
 }[m
 [m
 void CChainState::UnloadBlockIndex() {[m
[33mdiff --git a/src/validation.h b/src/validation.h[m
[33mindex 512b30621..3c7f593c8 100644[m
[33m--- a/src/validation.h[m
[33m+++ b/src/validation.h[m
[36m@@ -722,7 +722,9 @@[m [mpublic:[m
 [m
     /** Replay blocks that aren't fully applied to the database. */[m
     bool ReplayBlocks(const CChainParams& params);[m
[31m-    bool RewindBlockIndex(const CChainParams& params) LOCKS_EXCLUDED(cs_main);[m
[32m+[m
[32m+[m[32m    /** Whether the chain state needs to be redownloaded due to lack of witness data */[m
[32m+[m[32m    [[nodiscard]] bool NeedsRedownload(const CChainParams& params) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);[m
     /** Ensures we have a genesis block in the block tree, possibly writing one to disk. */[m
     bool LoadGenesisBlock(const CChainParams& chainparams);[m
 [m
[36m@@ -769,9 +771,6 @@[m [mprivate:[m
 [m
     bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params) EXCLUSIVE_LOCKS_REQUIRED(cs_main);[m
 [m
[31m-    //! Mark a block as not having block data[m
[31m-    void EraseBlockData(CBlockIndex* index) EXCLUSIVE_LOCKS_REQUIRED(cs_main);[m
[31m-[m
     void CheckForkWarningConditions() EXCLUSIVE_LOCKS_REQUIRED(cs_main);[m
     void InvalidChainFound(CBlockIndex* pindexNew) EXCLUSIVE_LOCKS_REQUIRED(cs_main);[m
 [m
[33mdiff --git a/test/functional/p2p_segwit.py b/test/functional/p2p_segwit.py[m
[33mindex 54891b07e..14a4afc2d 100755[m
[33m--- a/test/functional/p2p_segwit.py[m
[33m+++ b/test/functional/p2p_segwit.py[m
[36m@@ -1956,22 +1956,33 @@[m [mclass SegWitTest(BitcoinTestFramework):[m
     def test_upgrade_after_activation(self):[m
         """Test the behavior of starting up a segwit-aware node after the softfork has activated."""[m
 [m
[31m-        self.restart_node(2, extra_args=["-segwitheight={}".format(SEGWIT_HEIGHT)])[m
[32m+[m[32m        # All nodes are caught up and node 2 is a pre-segwit node that will soon upgrade.[m
[32m+[m[32m        for n in range(2):[m
[32m+[m[32m            assert_equal(self.nodes[n].getblockcount(), self.nodes[2].getblockcount())[m
[32m+[m[32m            assert softfork_active(self.nodes[n], "segwit")[m
[32m+[m[32m        assert SEGWIT_HEIGHT < self.nodes[2].getblockcount()[m
[32m+[m[32m        assert 'segwit' not in self.nodes[2].getblockchaininfo()['softforks'][m
[32m+[m
[32m+[m[32m        # Restarting node 2 should result in a shutdown because the blockchain consists of[m
[32m+[m[32m        # insufficiently validated blocks per segwit consensus rules.[m
[32m+[m[32m        self.stop_node(2)[m
[32m+[m[32m        with self.nodes[2].assert_debug_log(expected_msgs=[[m
[32m+[m[32m                f"Witness data for blocks after height {SEGWIT_HEIGHT} requires validation. Please restart with -reindex."], timeout=10):[m
[32m+[m[32m            self.nodes[2].start([f"-segwitheight={SEGWIT_HEIGHT}"])[m
[32m+[m
[32m+[m[32m        # As directed, the user restarts the node with -reindex[m
[32m+[m[32m        self.start_node(2, extra_args=["-reindex", f"-segwitheight={SEGWIT_HEIGHT}"])[m
[32m+[m
[32m+[m[32m        # With the segwit consensus rules, the node is able to validate only up to SEGWIT_HEIGHT - 1[m
[32m+[m[32m        assert_equal(self.nodes[2].getblockcount(), SEGWIT_HEIGHT - 1)[m
         self.connect_nodes(0, 2)[m
 [m
         # We reconnect more than 100 blocks, give it plenty of time[m
[32m+[m[32m        # sync_blocks() also verifies the best block hash is the same for all nodes[m
         self.sync_blocks(timeout=240)[m
 [m
[31m-        # Make sure that this peer thinks segwit has activated.[m
[31m-        assert softfork_active(self.nodes[2], 'segwit')[m
[31m-[m
[31m-        # Make sure this peer's blocks match those of node0.[m
[31m-        height = self.nodes[2].getblockcount()[m
[31m-        while height >= 0:[m
[31m-            block_hash = self.nodes[2].getblockhash(height)[m
[31m-            assert_equal(block_hash, self.nodes[0].getblockhash(height))[m
[31m-            assert_equal(self.nodes[0].getblock(block_hash), self.nodes[2].getblock(block_hash))[m
[31m-            height -= 1[m
[32m+[m[32m        # The upgraded node should now have segwit activated[m
[32m+[m[32m        assert softfork_active(self.nodes[2], "segwit")[m
 [m
     @subtest  # type: ignore[m
     def test_witness_sigops(self):[m